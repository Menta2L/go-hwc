// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type HardwareHTTPServer interface {
	GetHardware(context.Context, *GetHardwareRequest) (*GetHardwareReply, error)
	Send(context.Context, *SendRequest) (*SendReply, error)
}

func RegisterHardwareHTTPServer(s *http.Server, srv HardwareHTTPServer) {
	r := s.Route("/")
	r.POST("/hardware/send", _Hardware_Send0_HTTP_Handler(srv))
	r.POST("/hardware/get", _Hardware_GetHardware0_HTTP_Handler(srv))
}

func _Hardware_Send0_HTTP_Handler(srv HardwareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/hardware.v1.Hardware/Send")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Send(ctx, req.(*SendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendReply)
		return ctx.Result(200, reply)
	}
}

func _Hardware_GetHardware0_HTTP_Handler(srv HardwareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHardwareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/hardware.v1.Hardware/GetHardware")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHardware(ctx, req.(*GetHardwareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHardwareReply)
		return ctx.Result(200, reply)
	}
}

type HardwareHTTPClient interface {
	GetHardware(ctx context.Context, req *GetHardwareRequest, opts ...http.CallOption) (rsp *GetHardwareReply, err error)
	Send(ctx context.Context, req *SendRequest, opts ...http.CallOption) (rsp *SendReply, err error)
}

type HardwareHTTPClientImpl struct {
	cc *http.Client
}

func NewHardwareHTTPClient(client *http.Client) HardwareHTTPClient {
	return &HardwareHTTPClientImpl{client}
}

func (c *HardwareHTTPClientImpl) GetHardware(ctx context.Context, in *GetHardwareRequest, opts ...http.CallOption) (*GetHardwareReply, error) {
	var out GetHardwareReply
	pattern := "/hardware/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/hardware.v1.Hardware/GetHardware"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HardwareHTTPClientImpl) Send(ctx context.Context, in *SendRequest, opts ...http.CallOption) (*SendReply, error) {
	var out SendReply
	pattern := "/hardware/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/hardware.v1.Hardware/Send"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
