// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: hardware/v1/hardware.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing the user's name.
type SendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *HardwareInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SendRequest) Reset() {
	*x = SendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRequest) ProtoMessage() {}

func (x *SendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRequest.ProtoReflect.Descriptor instead.
func (*SendRequest) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{0}
}

func (x *SendRequest) GetInfo() *HardwareInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// The response message containing the greetings
type SendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendReply) Reset() {
	*x = SendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendReply) ProtoMessage() {}

func (x *SendReply) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendReply.ProtoReflect.Descriptor instead.
func (*SendReply) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{1}
}

// Request.
type GetHardwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Different ways to get hardware info
	//
	// Types that are assignable to Filter:
	//	*GetHardwareRequest_Id
	//	*GetHardwareRequest_Host
	Filter isGetHardwareRequest_Filter `protobuf_oneof:"filter"`
}

func (x *GetHardwareRequest) Reset() {
	*x = GetHardwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHardwareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareRequest) ProtoMessage() {}

func (x *GetHardwareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareRequest.ProtoReflect.Descriptor instead.
func (*GetHardwareRequest) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{2}
}

func (m *GetHardwareRequest) GetFilter() isGetHardwareRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *GetHardwareRequest) GetId() *GetHardwareRequest_ByID {
	if x, ok := x.GetFilter().(*GetHardwareRequest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *GetHardwareRequest) GetHost() *GetHardwareRequest_ByHostname {
	if x, ok := x.GetFilter().(*GetHardwareRequest_Host); ok {
		return x.Host
	}
	return nil
}

type isGetHardwareRequest_Filter interface {
	isGetHardwareRequest_Filter()
}

type GetHardwareRequest_Id struct {
	Id *GetHardwareRequest_ByID `protobuf:"bytes,1,opt,name=Id,proto3,oneof"`
}

type GetHardwareRequest_Host struct {
	Host *GetHardwareRequest_ByHostname `protobuf:"bytes,2,opt,name=Host,proto3,oneof"`
}

func (*GetHardwareRequest_Id) isGetHardwareRequest_Filter() {}

func (*GetHardwareRequest_Host) isGetHardwareRequest_Filter() {}

type GetHardwareReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *HardwareInfo `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetHardwareReply) Reset() {
	*x = GetHardwareReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHardwareReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareReply) ProtoMessage() {}

func (x *GetHardwareReply) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareReply.ProtoReflect.Descriptor instead.
func (*GetHardwareReply) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{3}
}

func (x *GetHardwareReply) GetInfo() *HardwareInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *Memory) Reset() {
	*x = Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{4}
}

func (x *Memory) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname             string `protobuf:"bytes,1,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	OS                   string `protobuf:"bytes,2,opt,name=OS,proto3" json:"OS,omitempty"`
	Platform             string `protobuf:"bytes,3,opt,name=Platform,proto3" json:"Platform,omitempty"`
	PlatformFamily       string `protobuf:"bytes,4,opt,name=PlatformFamily,proto3" json:"PlatformFamily,omitempty"`
	PlatformVersion      string `protobuf:"bytes,5,opt,name=PlatformVersion,proto3" json:"PlatformVersion,omitempty"`
	KernelVersion        string `protobuf:"bytes,6,opt,name=KernelVersion,proto3" json:"KernelVersion,omitempty"`
	KernelArch           string `protobuf:"bytes,7,opt,name=KernelArch,proto3" json:"KernelArch,omitempty"`
	VirtualizationSystem string `protobuf:"bytes,8,opt,name=VirtualizationSystem,proto3" json:"VirtualizationSystem,omitempty"`
	VirtualizationRole   string `protobuf:"bytes,9,opt,name=VirtualizationRole,proto3" json:"VirtualizationRole,omitempty"`
	HostID               string `protobuf:"bytes,10,opt,name=HostID,proto3" json:"HostID,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{5}
}

func (x *Host) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Host) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Host) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Host) GetPlatformFamily() string {
	if x != nil {
		return x.PlatformFamily
	}
	return ""
}

func (x *Host) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *Host) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *Host) GetKernelArch() string {
	if x != nil {
		return x.KernelArch
	}
	return ""
}

func (x *Host) GetVirtualizationSystem() string {
	if x != nil {
		return x.VirtualizationSystem
	}
	return ""
}

func (x *Host) GetVirtualizationRole() string {
	if x != nil {
		return x.VirtualizationRole
	}
	return ""
}

func (x *Host) GetHostID() string {
	if x != nil {
		return x.HostID
	}
	return ""
}

type Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPU       int32  `protobuf:"varint,1,opt,name=CPU,proto3" json:"CPU,omitempty"`
	VendorID  string `protobuf:"bytes,2,opt,name=VendorID,proto3" json:"VendorID,omitempty"`
	Family    string `protobuf:"bytes,3,opt,name=Family,proto3" json:"Family,omitempty"`
	Model     string `protobuf:"bytes,4,opt,name=Model,proto3" json:"Model,omitempty"`
	ModelName string `protobuf:"bytes,5,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
}

func (x *Cpu) Reset() {
	*x = Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cpu) ProtoMessage() {}

func (x *Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cpu.ProtoReflect.Descriptor instead.
func (*Cpu) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{6}
}

func (x *Cpu) GetCPU() int32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *Cpu) GetVendorID() string {
	if x != nil {
		return x.VendorID
	}
	return ""
}

func (x *Cpu) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *Cpu) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Cpu) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type NetworkInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        int64    `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	MTU          int64    `protobuf:"varint,2,opt,name=MTU,proto3" json:"MTU,omitempty"`
	Name         string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	HardwareAddr string   `protobuf:"bytes,4,opt,name=HardwareAddr,proto3" json:"HardwareAddr,omitempty"`
	Flags        []string `protobuf:"bytes,5,rep,name=Flags,proto3" json:"Flags,omitempty"`
	Addrs        []string `protobuf:"bytes,6,rep,name=Addrs,proto3" json:"Addrs,omitempty"`
}

func (x *NetworkInterfaces) Reset() {
	*x = NetworkInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterfaces) ProtoMessage() {}

func (x *NetworkInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterfaces.ProtoReflect.Descriptor instead.
func (*NetworkInterfaces) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkInterfaces) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NetworkInterfaces) GetMTU() int64 {
	if x != nil {
		return x.MTU
	}
	return 0
}

func (x *NetworkInterfaces) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterfaces) GetHardwareAddr() string {
	if x != nil {
		return x.HardwareAddr
	}
	return ""
}

func (x *NetworkInterfaces) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *NetworkInterfaces) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type DiskPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device     string   `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	Mountpoint string   `protobuf:"bytes,2,opt,name=Mountpoint,proto3" json:"Mountpoint,omitempty"`
	Fstype     string   `protobuf:"bytes,3,opt,name=Fstype,proto3" json:"Fstype,omitempty"`
	Opts       []string `protobuf:"bytes,4,rep,name=Opts,proto3" json:"Opts,omitempty"`
}

func (x *DiskPartition) Reset() {
	*x = DiskPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPartition) ProtoMessage() {}

func (x *DiskPartition) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPartition.ProtoReflect.Descriptor instead.
func (*DiskPartition) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{8}
}

func (x *DiskPartition) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DiskPartition) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

func (x *DiskPartition) GetFstype() string {
	if x != nil {
		return x.Fstype
	}
	return ""
}

func (x *DiskPartition) GetOpts() []string {
	if x != nil {
		return x.Opts
	}
	return nil
}

type Netstat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr    string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Port    uint64 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Proto   string `protobuf:"bytes,3,opt,name=Proto,proto3" json:"Proto,omitempty"`
	Process string `protobuf:"bytes,4,opt,name=Process,proto3" json:"Process,omitempty"`
}

func (x *Netstat) Reset() {
	*x = Netstat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Netstat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Netstat) ProtoMessage() {}

func (x *Netstat) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Netstat.ProtoReflect.Descriptor instead.
func (*Netstat) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{9}
}

func (x *Netstat) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Netstat) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Netstat) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *Netstat) GetProcess() string {
	if x != nil {
		return x.Process
	}
	return ""
}

type HardwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host              *Host                `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Memory            *Memory              `protobuf:"bytes,2,opt,name=Memory,proto3" json:"Memory,omitempty"`
	NetworkInterfaces []*NetworkInterfaces `protobuf:"bytes,3,rep,name=NetworkInterfaces,proto3" json:"NetworkInterfaces,omitempty"`
	DiskPartition     []*DiskPartition     `protobuf:"bytes,4,rep,name=DiskPartition,proto3" json:"DiskPartition,omitempty"`
	Netstat           []*Netstat           `protobuf:"bytes,5,rep,name=Netstat,proto3" json:"Netstat,omitempty"`
	Cpu               []*Cpu               `protobuf:"bytes,6,rep,name=Cpu,proto3" json:"Cpu,omitempty"`
}

func (x *HardwareInfo) Reset() {
	*x = HardwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareInfo) ProtoMessage() {}

func (x *HardwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareInfo.ProtoReflect.Descriptor instead.
func (*HardwareInfo) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{10}
}

func (x *HardwareInfo) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HardwareInfo) GetMemory() *Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *HardwareInfo) GetNetworkInterfaces() []*NetworkInterfaces {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *HardwareInfo) GetDiskPartition() []*DiskPartition {
	if x != nil {
		return x.DiskPartition
	}
	return nil
}

func (x *HardwareInfo) GetNetstat() []*Netstat {
	if x != nil {
		return x.Netstat
	}
	return nil
}

func (x *HardwareInfo) GetCpu() []*Cpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

type GetHardwareRequest_ByID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetHardwareRequest_ByID) Reset() {
	*x = GetHardwareRequest_ByID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHardwareRequest_ByID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareRequest_ByID) ProtoMessage() {}

func (x *GetHardwareRequest_ByID) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareRequest_ByID.ProtoReflect.Descriptor instead.
func (*GetHardwareRequest_ByID) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetHardwareRequest_ByID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetHardwareRequest_ByHostname struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
}

func (x *GetHardwareRequest_ByHostname) Reset() {
	*x = GetHardwareRequest_ByHostname{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardware_v1_hardware_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHardwareRequest_ByHostname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareRequest_ByHostname) ProtoMessage() {}

func (x *GetHardwareRequest_ByHostname) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareRequest_ByHostname.ProtoReflect.Descriptor instead.
func (*GetHardwareRequest_ByHostname) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{2, 1}
}

func (x *GetHardwareRequest_ByHostname) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

var File_hardware_v1_hardware_proto protoreflect.FileDescriptor

var file_hardware_v1_hardware_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x0b, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x79, 0x49, 0x44, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x1a, 0x16, 0x0a, 0x04, 0x42, 0x79, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x1a, 0x20, 0x0a, 0x0a, 0x42,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1e, 0x0a, 0x06, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe2, 0x02, 0x0a, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x53, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x22,
	0x7f, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x9f, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x4d, 0x54, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x4d, 0x54, 0x55, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x41, 0x64, 0x64,
	0x72, 0x73, 0x22, 0x73, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x4f, 0x70, 0x74, 0x73, 0x22, 0x61, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x73, 0x74,
	0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x0c, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x4c, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x11, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x12,
	0x22, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x75, 0x52, 0x03,
	0x43, 0x70, 0x75, 0x32, 0xd4, 0x01, 0x0a, 0x08, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x59, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x22, 0x0e, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x73, 0x65,
	0x6e, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1f, 0x2e, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x22, 0x0d, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x67, 0x65,
	0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x42, 0x5d, 0x0a, 0x1a, 0x64, 0x65,
	0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x32, 0x6c, 0x2f,
	0x67, 0x6f, 0x2d, 0x68, 0x77, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_hardware_v1_hardware_proto_rawDescOnce sync.Once
	file_hardware_v1_hardware_proto_rawDescData = file_hardware_v1_hardware_proto_rawDesc
)

func file_hardware_v1_hardware_proto_rawDescGZIP() []byte {
	file_hardware_v1_hardware_proto_rawDescOnce.Do(func() {
		file_hardware_v1_hardware_proto_rawDescData = protoimpl.X.CompressGZIP(file_hardware_v1_hardware_proto_rawDescData)
	})
	return file_hardware_v1_hardware_proto_rawDescData
}

var file_hardware_v1_hardware_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_hardware_v1_hardware_proto_goTypes = []interface{}{
	(*SendRequest)(nil),                   // 0: hardware.v1.SendRequest
	(*SendReply)(nil),                     // 1: hardware.v1.SendReply
	(*GetHardwareRequest)(nil),            // 2: hardware.v1.GetHardwareRequest
	(*GetHardwareReply)(nil),              // 3: hardware.v1.GetHardwareReply
	(*Memory)(nil),                        // 4: hardware.v1.Memory
	(*Host)(nil),                          // 5: hardware.v1.Host
	(*Cpu)(nil),                           // 6: hardware.v1.Cpu
	(*NetworkInterfaces)(nil),             // 7: hardware.v1.NetworkInterfaces
	(*DiskPartition)(nil),                 // 8: hardware.v1.DiskPartition
	(*Netstat)(nil),                       // 9: hardware.v1.Netstat
	(*HardwareInfo)(nil),                  // 10: hardware.v1.HardwareInfo
	(*GetHardwareRequest_ByID)(nil),       // 11: hardware.v1.GetHardwareRequest.ByID
	(*GetHardwareRequest_ByHostname)(nil), // 12: hardware.v1.GetHardwareRequest.ByHostname
}
var file_hardware_v1_hardware_proto_depIdxs = []int32{
	10, // 0: hardware.v1.SendRequest.info:type_name -> hardware.v1.HardwareInfo
	11, // 1: hardware.v1.GetHardwareRequest.Id:type_name -> hardware.v1.GetHardwareRequest.ByID
	12, // 2: hardware.v1.GetHardwareRequest.Host:type_name -> hardware.v1.GetHardwareRequest.ByHostname
	10, // 3: hardware.v1.GetHardwareReply.Info:type_name -> hardware.v1.HardwareInfo
	5,  // 4: hardware.v1.HardwareInfo.Host:type_name -> hardware.v1.Host
	4,  // 5: hardware.v1.HardwareInfo.Memory:type_name -> hardware.v1.Memory
	7,  // 6: hardware.v1.HardwareInfo.NetworkInterfaces:type_name -> hardware.v1.NetworkInterfaces
	8,  // 7: hardware.v1.HardwareInfo.DiskPartition:type_name -> hardware.v1.DiskPartition
	9,  // 8: hardware.v1.HardwareInfo.Netstat:type_name -> hardware.v1.Netstat
	6,  // 9: hardware.v1.HardwareInfo.Cpu:type_name -> hardware.v1.Cpu
	0,  // 10: hardware.v1.Hardware.Send:input_type -> hardware.v1.SendRequest
	2,  // 11: hardware.v1.Hardware.GetHardware:input_type -> hardware.v1.GetHardwareRequest
	1,  // 12: hardware.v1.Hardware.Send:output_type -> hardware.v1.SendReply
	3,  // 13: hardware.v1.Hardware.GetHardware:output_type -> hardware.v1.GetHardwareReply
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_hardware_v1_hardware_proto_init() }
func file_hardware_v1_hardware_proto_init() {
	if File_hardware_v1_hardware_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hardware_v1_hardware_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHardwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHardwareReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Netstat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHardwareRequest_ByID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardware_v1_hardware_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHardwareRequest_ByHostname); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hardware_v1_hardware_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GetHardwareRequest_Id)(nil),
		(*GetHardwareRequest_Host)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hardware_v1_hardware_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hardware_v1_hardware_proto_goTypes,
		DependencyIndexes: file_hardware_v1_hardware_proto_depIdxs,
		MessageInfos:      file_hardware_v1_hardware_proto_msgTypes,
	}.Build()
	File_hardware_v1_hardware_proto = out.File
	file_hardware_v1_hardware_proto_rawDesc = nil
	file_hardware_v1_hardware_proto_goTypes = nil
	file_hardware_v1_hardware_proto_depIdxs = nil
}
