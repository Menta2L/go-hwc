// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/menta2l/go-hwc/internal/data/ent/host"
	"github.com/menta2l/go-hwc/internal/data/ent/network"
)

// Network is the model entity for the Network schema.
type Network struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Index holds the value of the "Index" field.
	Index int `json:"Index,omitempty"`
	// MTU holds the value of the "MTU" field.
	MTU int `json:"MTU,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// HardwareAddr holds the value of the "HardwareAddr" field.
	HardwareAddr string `json:"HardwareAddr,omitempty"`
	// Flags holds the value of the "Flags" field.
	Flags []string `json:"Flags,omitempty"`
	// Addrs holds the value of the "addrs" field.
	Addrs []string `json:"addrs,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NetworkQuery when eager-loading is set.
	Edges        NetworkEdges `json:"edges"`
	host_network *string
}

// NetworkEdges holds the relations/edges for other nodes in the graph.
type NetworkEdges struct {
	// HostID holds the value of the host_id edge.
	HostID *Host `json:"host_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HostIDOrErr returns the HostID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NetworkEdges) HostIDOrErr() (*Host, error) {
	if e.loadedTypes[0] {
		if e.HostID == nil {
			// The edge host_id was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: host.Label}
		}
		return e.HostID, nil
	}
	return nil, &NotLoadedError{edge: "host_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Network) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case network.FieldFlags, network.FieldAddrs:
			values[i] = new([]byte)
		case network.FieldID, network.FieldIndex, network.FieldMTU:
			values[i] = new(sql.NullInt64)
		case network.FieldName, network.FieldHardwareAddr:
			values[i] = new(sql.NullString)
		case network.FieldCreatedAt, network.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case network.ForeignKeys[0]: // host_network
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Network", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Network fields.
func (n *Network) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case network.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case network.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Index", values[i])
			} else if value.Valid {
				n.Index = int(value.Int64)
			}
		case network.FieldMTU:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MTU", values[i])
			} else if value.Valid {
				n.MTU = int(value.Int64)
			}
		case network.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case network.FieldHardwareAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HardwareAddr", values[i])
			} else if value.Valid {
				n.HardwareAddr = value.String
			}
		case network.FieldFlags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Flags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Flags); err != nil {
					return fmt.Errorf("unmarshal field Flags: %w", err)
				}
			}
		case network.FieldAddrs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field addrs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Addrs); err != nil {
					return fmt.Errorf("unmarshal field addrs: %w", err)
				}
			}
		case network.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case network.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case network.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_network", values[i])
			} else if value.Valid {
				n.host_network = new(string)
				*n.host_network = value.String
			}
		}
	}
	return nil
}

// QueryHostID queries the "host_id" edge of the Network entity.
func (n *Network) QueryHostID() *HostQuery {
	return (&NetworkClient{config: n.config}).QueryHostID(n)
}

// Update returns a builder for updating this Network.
// Note that you need to call Network.Unwrap() before calling this method if this Network
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Network) Update() *NetworkUpdateOne {
	return (&NetworkClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Network entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Network) Unwrap() *Network {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Network is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Network) String() string {
	var builder strings.Builder
	builder.WriteString("Network(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", Index=")
	builder.WriteString(fmt.Sprintf("%v", n.Index))
	builder.WriteString(", MTU=")
	builder.WriteString(fmt.Sprintf("%v", n.MTU))
	builder.WriteString(", name=")
	builder.WriteString(n.Name)
	builder.WriteString(", HardwareAddr=")
	builder.WriteString(n.HardwareAddr)
	builder.WriteString(", Flags=")
	builder.WriteString(fmt.Sprintf("%v", n.Flags))
	builder.WriteString(", addrs=")
	builder.WriteString(fmt.Sprintf("%v", n.Addrs))
	builder.WriteString(", created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Networks is a parsable slice of Network.
type Networks []*Network

func (n Networks) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
