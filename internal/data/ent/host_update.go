// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/menta2l/go-hwc/internal/data/ent/cpu"
	"github.com/menta2l/go-hwc/internal/data/ent/disk"
	"github.com/menta2l/go-hwc/internal/data/ent/host"
	"github.com/menta2l/go-hwc/internal/data/ent/netstat"
	"github.com/menta2l/go-hwc/internal/data/ent/network"
	"github.com/menta2l/go-hwc/internal/data/ent/predicate"
)

// HostUpdate is the builder for updating Host entities.
type HostUpdate struct {
	config
	hooks    []Hook
	mutation *HostMutation
}

// Where appends a list predicates to the HostUpdate builder.
func (hu *HostUpdate) Where(ps ...predicate.Host) *HostUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetHostname sets the "hostname" field.
func (hu *HostUpdate) SetHostname(s string) *HostUpdate {
	hu.mutation.SetHostname(s)
	return hu
}

// SetOs sets the "os" field.
func (hu *HostUpdate) SetOs(s string) *HostUpdate {
	hu.mutation.SetOs(s)
	return hu
}

// SetPlatform sets the "platform" field.
func (hu *HostUpdate) SetPlatform(s string) *HostUpdate {
	hu.mutation.SetPlatform(s)
	return hu
}

// SetPlatformFamily sets the "platform_family" field.
func (hu *HostUpdate) SetPlatformFamily(s string) *HostUpdate {
	hu.mutation.SetPlatformFamily(s)
	return hu
}

// SetPlatformVersion sets the "platform_version" field.
func (hu *HostUpdate) SetPlatformVersion(s string) *HostUpdate {
	hu.mutation.SetPlatformVersion(s)
	return hu
}

// SetKernelVersion sets the "kernel_version" field.
func (hu *HostUpdate) SetKernelVersion(s string) *HostUpdate {
	hu.mutation.SetKernelVersion(s)
	return hu
}

// SetKernelArch sets the "kernel_arch" field.
func (hu *HostUpdate) SetKernelArch(s string) *HostUpdate {
	hu.mutation.SetKernelArch(s)
	return hu
}

// SetVirtualizationSystem sets the "virtualization_system" field.
func (hu *HostUpdate) SetVirtualizationSystem(s string) *HostUpdate {
	hu.mutation.SetVirtualizationSystem(s)
	return hu
}

// SetVirtualizationRole sets the "virtualization_role" field.
func (hu *HostUpdate) SetVirtualizationRole(s string) *HostUpdate {
	hu.mutation.SetVirtualizationRole(s)
	return hu
}

// SetCreatedAt sets the "created_at" field.
func (hu *HostUpdate) SetCreatedAt(t time.Time) *HostUpdate {
	hu.mutation.SetCreatedAt(t)
	return hu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hu *HostUpdate) SetNillableCreatedAt(t *time.Time) *HostUpdate {
	if t != nil {
		hu.SetCreatedAt(*t)
	}
	return hu
}

// SetUpdatedAt sets the "updated_at" field.
func (hu *HostUpdate) SetUpdatedAt(t time.Time) *HostUpdate {
	hu.mutation.SetUpdatedAt(t)
	return hu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hu *HostUpdate) SetNillableUpdatedAt(t *time.Time) *HostUpdate {
	if t != nil {
		hu.SetUpdatedAt(*t)
	}
	return hu
}

// AddCPUIDs adds the "cpu" edge to the Cpu entity by IDs.
func (hu *HostUpdate) AddCPUIDs(ids ...int) *HostUpdate {
	hu.mutation.AddCPUIDs(ids...)
	return hu
}

// AddCPU adds the "cpu" edges to the Cpu entity.
func (hu *HostUpdate) AddCPU(c ...*Cpu) *HostUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hu.AddCPUIDs(ids...)
}

// AddNetworkIDs adds the "network" edge to the Network entity by IDs.
func (hu *HostUpdate) AddNetworkIDs(ids ...int) *HostUpdate {
	hu.mutation.AddNetworkIDs(ids...)
	return hu
}

// AddNetwork adds the "network" edges to the Network entity.
func (hu *HostUpdate) AddNetwork(n ...*Network) *HostUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return hu.AddNetworkIDs(ids...)
}

// AddNetstatIDs adds the "netstat" edge to the Netstat entity by IDs.
func (hu *HostUpdate) AddNetstatIDs(ids ...int) *HostUpdate {
	hu.mutation.AddNetstatIDs(ids...)
	return hu
}

// AddNetstat adds the "netstat" edges to the Netstat entity.
func (hu *HostUpdate) AddNetstat(n ...*Netstat) *HostUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return hu.AddNetstatIDs(ids...)
}

// AddDiskIDs adds the "disk" edge to the Disk entity by IDs.
func (hu *HostUpdate) AddDiskIDs(ids ...int) *HostUpdate {
	hu.mutation.AddDiskIDs(ids...)
	return hu
}

// AddDisk adds the "disk" edges to the Disk entity.
func (hu *HostUpdate) AddDisk(d ...*Disk) *HostUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return hu.AddDiskIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (hu *HostUpdate) Mutation() *HostMutation {
	return hu.mutation
}

// ClearCPU clears all "cpu" edges to the Cpu entity.
func (hu *HostUpdate) ClearCPU() *HostUpdate {
	hu.mutation.ClearCPU()
	return hu
}

// RemoveCPUIDs removes the "cpu" edge to Cpu entities by IDs.
func (hu *HostUpdate) RemoveCPUIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveCPUIDs(ids...)
	return hu
}

// RemoveCPU removes "cpu" edges to Cpu entities.
func (hu *HostUpdate) RemoveCPU(c ...*Cpu) *HostUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hu.RemoveCPUIDs(ids...)
}

// ClearNetwork clears all "network" edges to the Network entity.
func (hu *HostUpdate) ClearNetwork() *HostUpdate {
	hu.mutation.ClearNetwork()
	return hu
}

// RemoveNetworkIDs removes the "network" edge to Network entities by IDs.
func (hu *HostUpdate) RemoveNetworkIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveNetworkIDs(ids...)
	return hu
}

// RemoveNetwork removes "network" edges to Network entities.
func (hu *HostUpdate) RemoveNetwork(n ...*Network) *HostUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return hu.RemoveNetworkIDs(ids...)
}

// ClearNetstat clears all "netstat" edges to the Netstat entity.
func (hu *HostUpdate) ClearNetstat() *HostUpdate {
	hu.mutation.ClearNetstat()
	return hu
}

// RemoveNetstatIDs removes the "netstat" edge to Netstat entities by IDs.
func (hu *HostUpdate) RemoveNetstatIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveNetstatIDs(ids...)
	return hu
}

// RemoveNetstat removes "netstat" edges to Netstat entities.
func (hu *HostUpdate) RemoveNetstat(n ...*Netstat) *HostUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return hu.RemoveNetstatIDs(ids...)
}

// ClearDisk clears all "disk" edges to the Disk entity.
func (hu *HostUpdate) ClearDisk() *HostUpdate {
	hu.mutation.ClearDisk()
	return hu
}

// RemoveDiskIDs removes the "disk" edge to Disk entities by IDs.
func (hu *HostUpdate) RemoveDiskIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveDiskIDs(ids...)
	return hu
}

// RemoveDisk removes "disk" edges to Disk entities.
func (hu *HostUpdate) RemoveDisk(d ...*Disk) *HostUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return hu.RemoveDiskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HostUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HostUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HostUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   host.Table,
			Columns: host.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: host.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHostname,
		})
	}
	if value, ok := hu.mutation.Os(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldOs,
		})
	}
	if value, ok := hu.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldPlatform,
		})
	}
	if value, ok := hu.mutation.PlatformFamily(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldPlatformFamily,
		})
	}
	if value, ok := hu.mutation.PlatformVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldPlatformVersion,
		})
	}
	if value, ok := hu.mutation.KernelVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldKernelVersion,
		})
	}
	if value, ok := hu.mutation.KernelArch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldKernelArch,
		})
	}
	if value, ok := hu.mutation.VirtualizationSystem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldVirtualizationSystem,
		})
	}
	if value, ok := hu.mutation.VirtualizationRole(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldVirtualizationRole,
		})
	}
	if value, ok := hu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: host.FieldCreatedAt,
		})
	}
	if value, ok := hu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: host.FieldUpdatedAt,
		})
	}
	if hu.mutation.CPUCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.CPUTable,
			Columns: []string{host.CPUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cpu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedCPUIDs(); len(nodes) > 0 && !hu.mutation.CPUCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.CPUTable,
			Columns: []string{host.CPUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cpu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.CPUIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.CPUTable,
			Columns: []string{host.CPUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cpu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetworkTable,
			Columns: []string{host.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedNetworkIDs(); len(nodes) > 0 && !hu.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetworkTable,
			Columns: []string{host.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetworkTable,
			Columns: []string{host.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.NetstatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetstatTable,
			Columns: []string{host.NetstatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netstat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedNetstatIDs(); len(nodes) > 0 && !hu.mutation.NetstatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetstatTable,
			Columns: []string{host.NetstatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.NetstatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetstatTable,
			Columns: []string{host.NetstatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.DiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.DiskTable,
			Columns: []string{host.DiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disk.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedDiskIDs(); len(nodes) > 0 && !hu.mutation.DiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.DiskTable,
			Columns: []string{host.DiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.DiskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.DiskTable,
			Columns: []string{host.DiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// HostUpdateOne is the builder for updating a single Host entity.
type HostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostMutation
}

// SetHostname sets the "hostname" field.
func (huo *HostUpdateOne) SetHostname(s string) *HostUpdateOne {
	huo.mutation.SetHostname(s)
	return huo
}

// SetOs sets the "os" field.
func (huo *HostUpdateOne) SetOs(s string) *HostUpdateOne {
	huo.mutation.SetOs(s)
	return huo
}

// SetPlatform sets the "platform" field.
func (huo *HostUpdateOne) SetPlatform(s string) *HostUpdateOne {
	huo.mutation.SetPlatform(s)
	return huo
}

// SetPlatformFamily sets the "platform_family" field.
func (huo *HostUpdateOne) SetPlatformFamily(s string) *HostUpdateOne {
	huo.mutation.SetPlatformFamily(s)
	return huo
}

// SetPlatformVersion sets the "platform_version" field.
func (huo *HostUpdateOne) SetPlatformVersion(s string) *HostUpdateOne {
	huo.mutation.SetPlatformVersion(s)
	return huo
}

// SetKernelVersion sets the "kernel_version" field.
func (huo *HostUpdateOne) SetKernelVersion(s string) *HostUpdateOne {
	huo.mutation.SetKernelVersion(s)
	return huo
}

// SetKernelArch sets the "kernel_arch" field.
func (huo *HostUpdateOne) SetKernelArch(s string) *HostUpdateOne {
	huo.mutation.SetKernelArch(s)
	return huo
}

// SetVirtualizationSystem sets the "virtualization_system" field.
func (huo *HostUpdateOne) SetVirtualizationSystem(s string) *HostUpdateOne {
	huo.mutation.SetVirtualizationSystem(s)
	return huo
}

// SetVirtualizationRole sets the "virtualization_role" field.
func (huo *HostUpdateOne) SetVirtualizationRole(s string) *HostUpdateOne {
	huo.mutation.SetVirtualizationRole(s)
	return huo
}

// SetCreatedAt sets the "created_at" field.
func (huo *HostUpdateOne) SetCreatedAt(t time.Time) *HostUpdateOne {
	huo.mutation.SetCreatedAt(t)
	return huo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableCreatedAt(t *time.Time) *HostUpdateOne {
	if t != nil {
		huo.SetCreatedAt(*t)
	}
	return huo
}

// SetUpdatedAt sets the "updated_at" field.
func (huo *HostUpdateOne) SetUpdatedAt(t time.Time) *HostUpdateOne {
	huo.mutation.SetUpdatedAt(t)
	return huo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableUpdatedAt(t *time.Time) *HostUpdateOne {
	if t != nil {
		huo.SetUpdatedAt(*t)
	}
	return huo
}

// AddCPUIDs adds the "cpu" edge to the Cpu entity by IDs.
func (huo *HostUpdateOne) AddCPUIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddCPUIDs(ids...)
	return huo
}

// AddCPU adds the "cpu" edges to the Cpu entity.
func (huo *HostUpdateOne) AddCPU(c ...*Cpu) *HostUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return huo.AddCPUIDs(ids...)
}

// AddNetworkIDs adds the "network" edge to the Network entity by IDs.
func (huo *HostUpdateOne) AddNetworkIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddNetworkIDs(ids...)
	return huo
}

// AddNetwork adds the "network" edges to the Network entity.
func (huo *HostUpdateOne) AddNetwork(n ...*Network) *HostUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return huo.AddNetworkIDs(ids...)
}

// AddNetstatIDs adds the "netstat" edge to the Netstat entity by IDs.
func (huo *HostUpdateOne) AddNetstatIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddNetstatIDs(ids...)
	return huo
}

// AddNetstat adds the "netstat" edges to the Netstat entity.
func (huo *HostUpdateOne) AddNetstat(n ...*Netstat) *HostUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return huo.AddNetstatIDs(ids...)
}

// AddDiskIDs adds the "disk" edge to the Disk entity by IDs.
func (huo *HostUpdateOne) AddDiskIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddDiskIDs(ids...)
	return huo
}

// AddDisk adds the "disk" edges to the Disk entity.
func (huo *HostUpdateOne) AddDisk(d ...*Disk) *HostUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return huo.AddDiskIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (huo *HostUpdateOne) Mutation() *HostMutation {
	return huo.mutation
}

// ClearCPU clears all "cpu" edges to the Cpu entity.
func (huo *HostUpdateOne) ClearCPU() *HostUpdateOne {
	huo.mutation.ClearCPU()
	return huo
}

// RemoveCPUIDs removes the "cpu" edge to Cpu entities by IDs.
func (huo *HostUpdateOne) RemoveCPUIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveCPUIDs(ids...)
	return huo
}

// RemoveCPU removes "cpu" edges to Cpu entities.
func (huo *HostUpdateOne) RemoveCPU(c ...*Cpu) *HostUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return huo.RemoveCPUIDs(ids...)
}

// ClearNetwork clears all "network" edges to the Network entity.
func (huo *HostUpdateOne) ClearNetwork() *HostUpdateOne {
	huo.mutation.ClearNetwork()
	return huo
}

// RemoveNetworkIDs removes the "network" edge to Network entities by IDs.
func (huo *HostUpdateOne) RemoveNetworkIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveNetworkIDs(ids...)
	return huo
}

// RemoveNetwork removes "network" edges to Network entities.
func (huo *HostUpdateOne) RemoveNetwork(n ...*Network) *HostUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return huo.RemoveNetworkIDs(ids...)
}

// ClearNetstat clears all "netstat" edges to the Netstat entity.
func (huo *HostUpdateOne) ClearNetstat() *HostUpdateOne {
	huo.mutation.ClearNetstat()
	return huo
}

// RemoveNetstatIDs removes the "netstat" edge to Netstat entities by IDs.
func (huo *HostUpdateOne) RemoveNetstatIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveNetstatIDs(ids...)
	return huo
}

// RemoveNetstat removes "netstat" edges to Netstat entities.
func (huo *HostUpdateOne) RemoveNetstat(n ...*Netstat) *HostUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return huo.RemoveNetstatIDs(ids...)
}

// ClearDisk clears all "disk" edges to the Disk entity.
func (huo *HostUpdateOne) ClearDisk() *HostUpdateOne {
	huo.mutation.ClearDisk()
	return huo
}

// RemoveDiskIDs removes the "disk" edge to Disk entities by IDs.
func (huo *HostUpdateOne) RemoveDiskIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveDiskIDs(ids...)
	return huo
}

// RemoveDisk removes "disk" edges to Disk entities.
func (huo *HostUpdateOne) RemoveDisk(d ...*Disk) *HostUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return huo.RemoveDiskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HostUpdateOne) Select(field string, fields ...string) *HostUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Host entity.
func (huo *HostUpdateOne) Save(ctx context.Context) (*Host, error) {
	var (
		err  error
		node *Host
	)
	if len(huo.hooks) == 0 {
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HostUpdateOne) SaveX(ctx context.Context) *Host {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HostUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HostUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HostUpdateOne) sqlSave(ctx context.Context) (_node *Host, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   host.Table,
			Columns: host.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: host.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Host.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, host.FieldID)
		for _, f := range fields {
			if !host.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != host.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHostname,
		})
	}
	if value, ok := huo.mutation.Os(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldOs,
		})
	}
	if value, ok := huo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldPlatform,
		})
	}
	if value, ok := huo.mutation.PlatformFamily(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldPlatformFamily,
		})
	}
	if value, ok := huo.mutation.PlatformVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldPlatformVersion,
		})
	}
	if value, ok := huo.mutation.KernelVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldKernelVersion,
		})
	}
	if value, ok := huo.mutation.KernelArch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldKernelArch,
		})
	}
	if value, ok := huo.mutation.VirtualizationSystem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldVirtualizationSystem,
		})
	}
	if value, ok := huo.mutation.VirtualizationRole(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldVirtualizationRole,
		})
	}
	if value, ok := huo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: host.FieldCreatedAt,
		})
	}
	if value, ok := huo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: host.FieldUpdatedAt,
		})
	}
	if huo.mutation.CPUCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.CPUTable,
			Columns: []string{host.CPUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cpu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedCPUIDs(); len(nodes) > 0 && !huo.mutation.CPUCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.CPUTable,
			Columns: []string{host.CPUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cpu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.CPUIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.CPUTable,
			Columns: []string{host.CPUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cpu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetworkTable,
			Columns: []string{host.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedNetworkIDs(); len(nodes) > 0 && !huo.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetworkTable,
			Columns: []string{host.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetworkTable,
			Columns: []string{host.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.NetstatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetstatTable,
			Columns: []string{host.NetstatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netstat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedNetstatIDs(); len(nodes) > 0 && !huo.mutation.NetstatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetstatTable,
			Columns: []string{host.NetstatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.NetstatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetstatTable,
			Columns: []string{host.NetstatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.DiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.DiskTable,
			Columns: []string{host.DiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disk.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedDiskIDs(); len(nodes) > 0 && !huo.mutation.DiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.DiskTable,
			Columns: []string{host.DiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.DiskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.DiskTable,
			Columns: []string{host.DiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Host{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
