// Code generated by entc, DO NOT EDIT.

package disk

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/menta2l/go-hwc/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Device applies equality check predicate on the "device" field. It's identical to DeviceEQ.
func Device(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDevice), v))
	})
}

// Mountpoint applies equality check predicate on the "Mountpoint" field. It's identical to MountpointEQ.
func Mountpoint(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMountpoint), v))
	})
}

// Fstype applies equality check predicate on the "Fstype" field. It's identical to FstypeEQ.
func Fstype(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFstype), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeviceEQ applies the EQ predicate on the "device" field.
func DeviceEQ(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDevice), v))
	})
}

// DeviceNEQ applies the NEQ predicate on the "device" field.
func DeviceNEQ(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDevice), v))
	})
}

// DeviceIn applies the In predicate on the "device" field.
func DeviceIn(vs ...string) predicate.Disk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDevice), v...))
	})
}

// DeviceNotIn applies the NotIn predicate on the "device" field.
func DeviceNotIn(vs ...string) predicate.Disk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDevice), v...))
	})
}

// DeviceGT applies the GT predicate on the "device" field.
func DeviceGT(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDevice), v))
	})
}

// DeviceGTE applies the GTE predicate on the "device" field.
func DeviceGTE(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDevice), v))
	})
}

// DeviceLT applies the LT predicate on the "device" field.
func DeviceLT(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDevice), v))
	})
}

// DeviceLTE applies the LTE predicate on the "device" field.
func DeviceLTE(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDevice), v))
	})
}

// DeviceContains applies the Contains predicate on the "device" field.
func DeviceContains(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDevice), v))
	})
}

// DeviceHasPrefix applies the HasPrefix predicate on the "device" field.
func DeviceHasPrefix(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDevice), v))
	})
}

// DeviceHasSuffix applies the HasSuffix predicate on the "device" field.
func DeviceHasSuffix(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDevice), v))
	})
}

// DeviceEqualFold applies the EqualFold predicate on the "device" field.
func DeviceEqualFold(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDevice), v))
	})
}

// DeviceContainsFold applies the ContainsFold predicate on the "device" field.
func DeviceContainsFold(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDevice), v))
	})
}

// MountpointEQ applies the EQ predicate on the "Mountpoint" field.
func MountpointEQ(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMountpoint), v))
	})
}

// MountpointNEQ applies the NEQ predicate on the "Mountpoint" field.
func MountpointNEQ(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMountpoint), v))
	})
}

// MountpointIn applies the In predicate on the "Mountpoint" field.
func MountpointIn(vs ...string) predicate.Disk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMountpoint), v...))
	})
}

// MountpointNotIn applies the NotIn predicate on the "Mountpoint" field.
func MountpointNotIn(vs ...string) predicate.Disk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMountpoint), v...))
	})
}

// MountpointGT applies the GT predicate on the "Mountpoint" field.
func MountpointGT(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMountpoint), v))
	})
}

// MountpointGTE applies the GTE predicate on the "Mountpoint" field.
func MountpointGTE(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMountpoint), v))
	})
}

// MountpointLT applies the LT predicate on the "Mountpoint" field.
func MountpointLT(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMountpoint), v))
	})
}

// MountpointLTE applies the LTE predicate on the "Mountpoint" field.
func MountpointLTE(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMountpoint), v))
	})
}

// MountpointContains applies the Contains predicate on the "Mountpoint" field.
func MountpointContains(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMountpoint), v))
	})
}

// MountpointHasPrefix applies the HasPrefix predicate on the "Mountpoint" field.
func MountpointHasPrefix(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMountpoint), v))
	})
}

// MountpointHasSuffix applies the HasSuffix predicate on the "Mountpoint" field.
func MountpointHasSuffix(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMountpoint), v))
	})
}

// MountpointEqualFold applies the EqualFold predicate on the "Mountpoint" field.
func MountpointEqualFold(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMountpoint), v))
	})
}

// MountpointContainsFold applies the ContainsFold predicate on the "Mountpoint" field.
func MountpointContainsFold(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMountpoint), v))
	})
}

// FstypeEQ applies the EQ predicate on the "Fstype" field.
func FstypeEQ(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFstype), v))
	})
}

// FstypeNEQ applies the NEQ predicate on the "Fstype" field.
func FstypeNEQ(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFstype), v))
	})
}

// FstypeIn applies the In predicate on the "Fstype" field.
func FstypeIn(vs ...string) predicate.Disk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFstype), v...))
	})
}

// FstypeNotIn applies the NotIn predicate on the "Fstype" field.
func FstypeNotIn(vs ...string) predicate.Disk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFstype), v...))
	})
}

// FstypeGT applies the GT predicate on the "Fstype" field.
func FstypeGT(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFstype), v))
	})
}

// FstypeGTE applies the GTE predicate on the "Fstype" field.
func FstypeGTE(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFstype), v))
	})
}

// FstypeLT applies the LT predicate on the "Fstype" field.
func FstypeLT(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFstype), v))
	})
}

// FstypeLTE applies the LTE predicate on the "Fstype" field.
func FstypeLTE(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFstype), v))
	})
}

// FstypeContains applies the Contains predicate on the "Fstype" field.
func FstypeContains(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFstype), v))
	})
}

// FstypeHasPrefix applies the HasPrefix predicate on the "Fstype" field.
func FstypeHasPrefix(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFstype), v))
	})
}

// FstypeHasSuffix applies the HasSuffix predicate on the "Fstype" field.
func FstypeHasSuffix(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFstype), v))
	})
}

// FstypeEqualFold applies the EqualFold predicate on the "Fstype" field.
func FstypeEqualFold(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFstype), v))
	})
}

// FstypeContainsFold applies the ContainsFold predicate on the "Fstype" field.
func FstypeContainsFold(v string) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFstype), v))
	})
}

// OptsIsNil applies the IsNil predicate on the "opts" field.
func OptsIsNil() predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOpts)))
	})
}

// OptsNotNil applies the NotNil predicate on the "opts" field.
func OptsNotNil() predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOpts)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Disk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Disk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Disk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Disk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Disk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasHostID applies the HasEdge predicate on the "host_id" edge.
func HasHostID() predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostIDTable, HostIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostIDWith applies the HasEdge predicate on the "host_id" edge with a given conditions (other predicates).
func HasHostIDWith(preds ...predicate.Host) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostIDTable, HostIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Disk) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Disk) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Disk) predicate.Disk {
	return predicate.Disk(func(s *sql.Selector) {
		p(s.Not())
	})
}
