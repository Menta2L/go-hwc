// Code generated by entc, DO NOT EDIT.

package network

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/menta2l/go-hwc/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Index applies equality check predicate on the "Index" field. It's identical to IndexEQ.
func Index(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// MTU applies equality check predicate on the "MTU" field. It's identical to MTUEQ.
func MTU(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMTU), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// HardwareAddr applies equality check predicate on the "HardwareAddr" field. It's identical to HardwareAddrEQ.
func HardwareAddr(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHardwareAddr), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// IndexEQ applies the EQ predicate on the "Index" field.
func IndexEQ(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// IndexNEQ applies the NEQ predicate on the "Index" field.
func IndexNEQ(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIndex), v))
	})
}

// IndexIn applies the In predicate on the "Index" field.
func IndexIn(vs ...int) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIndex), v...))
	})
}

// IndexNotIn applies the NotIn predicate on the "Index" field.
func IndexNotIn(vs ...int) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIndex), v...))
	})
}

// IndexGT applies the GT predicate on the "Index" field.
func IndexGT(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIndex), v))
	})
}

// IndexGTE applies the GTE predicate on the "Index" field.
func IndexGTE(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIndex), v))
	})
}

// IndexLT applies the LT predicate on the "Index" field.
func IndexLT(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIndex), v))
	})
}

// IndexLTE applies the LTE predicate on the "Index" field.
func IndexLTE(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIndex), v))
	})
}

// MTUEQ applies the EQ predicate on the "MTU" field.
func MTUEQ(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMTU), v))
	})
}

// MTUNEQ applies the NEQ predicate on the "MTU" field.
func MTUNEQ(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMTU), v))
	})
}

// MTUIn applies the In predicate on the "MTU" field.
func MTUIn(vs ...int) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMTU), v...))
	})
}

// MTUNotIn applies the NotIn predicate on the "MTU" field.
func MTUNotIn(vs ...int) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMTU), v...))
	})
}

// MTUGT applies the GT predicate on the "MTU" field.
func MTUGT(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMTU), v))
	})
}

// MTUGTE applies the GTE predicate on the "MTU" field.
func MTUGTE(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMTU), v))
	})
}

// MTULT applies the LT predicate on the "MTU" field.
func MTULT(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMTU), v))
	})
}

// MTULTE applies the LTE predicate on the "MTU" field.
func MTULTE(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMTU), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// HardwareAddrEQ applies the EQ predicate on the "HardwareAddr" field.
func HardwareAddrEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHardwareAddr), v))
	})
}

// HardwareAddrNEQ applies the NEQ predicate on the "HardwareAddr" field.
func HardwareAddrNEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHardwareAddr), v))
	})
}

// HardwareAddrIn applies the In predicate on the "HardwareAddr" field.
func HardwareAddrIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHardwareAddr), v...))
	})
}

// HardwareAddrNotIn applies the NotIn predicate on the "HardwareAddr" field.
func HardwareAddrNotIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHardwareAddr), v...))
	})
}

// HardwareAddrGT applies the GT predicate on the "HardwareAddr" field.
func HardwareAddrGT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHardwareAddr), v))
	})
}

// HardwareAddrGTE applies the GTE predicate on the "HardwareAddr" field.
func HardwareAddrGTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHardwareAddr), v))
	})
}

// HardwareAddrLT applies the LT predicate on the "HardwareAddr" field.
func HardwareAddrLT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHardwareAddr), v))
	})
}

// HardwareAddrLTE applies the LTE predicate on the "HardwareAddr" field.
func HardwareAddrLTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHardwareAddr), v))
	})
}

// HardwareAddrContains applies the Contains predicate on the "HardwareAddr" field.
func HardwareAddrContains(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHardwareAddr), v))
	})
}

// HardwareAddrHasPrefix applies the HasPrefix predicate on the "HardwareAddr" field.
func HardwareAddrHasPrefix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHardwareAddr), v))
	})
}

// HardwareAddrHasSuffix applies the HasSuffix predicate on the "HardwareAddr" field.
func HardwareAddrHasSuffix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHardwareAddr), v))
	})
}

// HardwareAddrEqualFold applies the EqualFold predicate on the "HardwareAddr" field.
func HardwareAddrEqualFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHardwareAddr), v))
	})
}

// HardwareAddrContainsFold applies the ContainsFold predicate on the "HardwareAddr" field.
func HardwareAddrContainsFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHardwareAddr), v))
	})
}

// FlagsIsNil applies the IsNil predicate on the "Flags" field.
func FlagsIsNil() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFlags)))
	})
}

// FlagsNotNil applies the NotNil predicate on the "Flags" field.
func FlagsNotNil() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFlags)))
	})
}

// AddrsIsNil applies the IsNil predicate on the "addrs" field.
func AddrsIsNil() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddrs)))
	})
}

// AddrsNotNil applies the NotNil predicate on the "addrs" field.
func AddrsNotNil() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddrs)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasHostID applies the HasEdge predicate on the "host_id" edge.
func HasHostID() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostIDTable, HostIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostIDWith applies the HasEdge predicate on the "host_id" edge with a given conditions (other predicates).
func HasHostIDWith(preds ...predicate.Host) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostIDTable, HostIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Network) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Network) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Network) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		p(s.Not())
	})
}
