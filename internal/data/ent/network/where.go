// Code generated by entc, DO NOT EDIT.

package network

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jackc/pgtype"
	"github.com/menta2l/go-hwc/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Idx applies equality check predicate on the "idx" field. It's identical to IdxEQ.
func Idx(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdx), v))
	})
}

// Mtu applies equality check predicate on the "mtu" field. It's identical to MtuEQ.
func Mtu(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMtu), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// MAC applies equality check predicate on the "mac" field. It's identical to MACEQ.
func MAC(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMAC), v))
	})
}

// Flags applies equality check predicate on the "flags" field. It's identical to FlagsEQ.
func Flags(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlags), v))
	})
}

// Addrs applies equality check predicate on the "addrs" field. It's identical to AddrsEQ.
func Addrs(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddrs), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// IdxEQ applies the EQ predicate on the "idx" field.
func IdxEQ(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdx), v))
	})
}

// IdxNEQ applies the NEQ predicate on the "idx" field.
func IdxNEQ(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdx), v))
	})
}

// IdxIn applies the In predicate on the "idx" field.
func IdxIn(vs ...int) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIdx), v...))
	})
}

// IdxNotIn applies the NotIn predicate on the "idx" field.
func IdxNotIn(vs ...int) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIdx), v...))
	})
}

// IdxGT applies the GT predicate on the "idx" field.
func IdxGT(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdx), v))
	})
}

// IdxGTE applies the GTE predicate on the "idx" field.
func IdxGTE(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdx), v))
	})
}

// IdxLT applies the LT predicate on the "idx" field.
func IdxLT(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdx), v))
	})
}

// IdxLTE applies the LTE predicate on the "idx" field.
func IdxLTE(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdx), v))
	})
}

// MtuEQ applies the EQ predicate on the "mtu" field.
func MtuEQ(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMtu), v))
	})
}

// MtuNEQ applies the NEQ predicate on the "mtu" field.
func MtuNEQ(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMtu), v))
	})
}

// MtuIn applies the In predicate on the "mtu" field.
func MtuIn(vs ...int) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMtu), v...))
	})
}

// MtuNotIn applies the NotIn predicate on the "mtu" field.
func MtuNotIn(vs ...int) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMtu), v...))
	})
}

// MtuGT applies the GT predicate on the "mtu" field.
func MtuGT(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMtu), v))
	})
}

// MtuGTE applies the GTE predicate on the "mtu" field.
func MtuGTE(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMtu), v))
	})
}

// MtuLT applies the LT predicate on the "mtu" field.
func MtuLT(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMtu), v))
	})
}

// MtuLTE applies the LTE predicate on the "mtu" field.
func MtuLTE(v int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMtu), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// MACEQ applies the EQ predicate on the "mac" field.
func MACEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMAC), v))
	})
}

// MACNEQ applies the NEQ predicate on the "mac" field.
func MACNEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMAC), v))
	})
}

// MACIn applies the In predicate on the "mac" field.
func MACIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMAC), v...))
	})
}

// MACNotIn applies the NotIn predicate on the "mac" field.
func MACNotIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMAC), v...))
	})
}

// MACGT applies the GT predicate on the "mac" field.
func MACGT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMAC), v))
	})
}

// MACGTE applies the GTE predicate on the "mac" field.
func MACGTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMAC), v))
	})
}

// MACLT applies the LT predicate on the "mac" field.
func MACLT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMAC), v))
	})
}

// MACLTE applies the LTE predicate on the "mac" field.
func MACLTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMAC), v))
	})
}

// MACContains applies the Contains predicate on the "mac" field.
func MACContains(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMAC), v))
	})
}

// MACHasPrefix applies the HasPrefix predicate on the "mac" field.
func MACHasPrefix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMAC), v))
	})
}

// MACHasSuffix applies the HasSuffix predicate on the "mac" field.
func MACHasSuffix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMAC), v))
	})
}

// MACEqualFold applies the EqualFold predicate on the "mac" field.
func MACEqualFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMAC), v))
	})
}

// MACContainsFold applies the ContainsFold predicate on the "mac" field.
func MACContainsFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMAC), v))
	})
}

// FlagsEQ applies the EQ predicate on the "flags" field.
func FlagsEQ(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlags), v))
	})
}

// FlagsNEQ applies the NEQ predicate on the "flags" field.
func FlagsNEQ(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlags), v))
	})
}

// FlagsIn applies the In predicate on the "flags" field.
func FlagsIn(vs ...*pgtype.TextArray) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFlags), v...))
	})
}

// FlagsNotIn applies the NotIn predicate on the "flags" field.
func FlagsNotIn(vs ...*pgtype.TextArray) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFlags), v...))
	})
}

// FlagsGT applies the GT predicate on the "flags" field.
func FlagsGT(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlags), v))
	})
}

// FlagsGTE applies the GTE predicate on the "flags" field.
func FlagsGTE(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlags), v))
	})
}

// FlagsLT applies the LT predicate on the "flags" field.
func FlagsLT(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlags), v))
	})
}

// FlagsLTE applies the LTE predicate on the "flags" field.
func FlagsLTE(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlags), v))
	})
}

// FlagsIsNil applies the IsNil predicate on the "flags" field.
func FlagsIsNil() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFlags)))
	})
}

// FlagsNotNil applies the NotNil predicate on the "flags" field.
func FlagsNotNil() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFlags)))
	})
}

// AddrsEQ applies the EQ predicate on the "addrs" field.
func AddrsEQ(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddrs), v))
	})
}

// AddrsNEQ applies the NEQ predicate on the "addrs" field.
func AddrsNEQ(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddrs), v))
	})
}

// AddrsIn applies the In predicate on the "addrs" field.
func AddrsIn(vs ...*pgtype.TextArray) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddrs), v...))
	})
}

// AddrsNotIn applies the NotIn predicate on the "addrs" field.
func AddrsNotIn(vs ...*pgtype.TextArray) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddrs), v...))
	})
}

// AddrsGT applies the GT predicate on the "addrs" field.
func AddrsGT(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddrs), v))
	})
}

// AddrsGTE applies the GTE predicate on the "addrs" field.
func AddrsGTE(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddrs), v))
	})
}

// AddrsLT applies the LT predicate on the "addrs" field.
func AddrsLT(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddrs), v))
	})
}

// AddrsLTE applies the LTE predicate on the "addrs" field.
func AddrsLTE(v *pgtype.TextArray) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddrs), v))
	})
}

// AddrsIsNil applies the IsNil predicate on the "addrs" field.
func AddrsIsNil() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddrs)))
	})
}

// AddrsNotNil applies the NotNil predicate on the "addrs" field.
func AddrsNotNil() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddrs)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasHostID applies the HasEdge predicate on the "host_id" edge.
func HasHostID() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostIDTable, HostIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostIDWith applies the HasEdge predicate on the "host_id" edge with a given conditions (other predicates).
func HasHostIDWith(preds ...predicate.Host) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostIDTable, HostIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Network) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Network) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Network) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		p(s.Not())
	})
}
