// Code generated by entc, DO NOT EDIT.

package netstat

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/menta2l/go-hwc/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Addr applies equality check predicate on the "addr" field. It's identical to AddrEQ.
func Addr(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddr), v))
	})
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v uint64) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// Proto applies equality check predicate on the "proto" field. It's identical to ProtoEQ.
func Proto(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProto), v))
	})
}

// Process applies equality check predicate on the "process" field. It's identical to ProcessEQ.
func Process(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcess), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// AddrEQ applies the EQ predicate on the "addr" field.
func AddrEQ(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddr), v))
	})
}

// AddrNEQ applies the NEQ predicate on the "addr" field.
func AddrNEQ(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddr), v))
	})
}

// AddrIn applies the In predicate on the "addr" field.
func AddrIn(vs ...string) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddr), v...))
	})
}

// AddrNotIn applies the NotIn predicate on the "addr" field.
func AddrNotIn(vs ...string) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddr), v...))
	})
}

// AddrGT applies the GT predicate on the "addr" field.
func AddrGT(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddr), v))
	})
}

// AddrGTE applies the GTE predicate on the "addr" field.
func AddrGTE(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddr), v))
	})
}

// AddrLT applies the LT predicate on the "addr" field.
func AddrLT(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddr), v))
	})
}

// AddrLTE applies the LTE predicate on the "addr" field.
func AddrLTE(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddr), v))
	})
}

// AddrContains applies the Contains predicate on the "addr" field.
func AddrContains(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddr), v))
	})
}

// AddrHasPrefix applies the HasPrefix predicate on the "addr" field.
func AddrHasPrefix(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddr), v))
	})
}

// AddrHasSuffix applies the HasSuffix predicate on the "addr" field.
func AddrHasSuffix(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddr), v))
	})
}

// AddrEqualFold applies the EqualFold predicate on the "addr" field.
func AddrEqualFold(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddr), v))
	})
}

// AddrContainsFold applies the ContainsFold predicate on the "addr" field.
func AddrContainsFold(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddr), v))
	})
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v uint64) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v uint64) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPort), v))
	})
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...uint64) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPort), v...))
	})
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...uint64) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPort), v...))
	})
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v uint64) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPort), v))
	})
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v uint64) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPort), v))
	})
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v uint64) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPort), v))
	})
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v uint64) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPort), v))
	})
}

// ProtoEQ applies the EQ predicate on the "proto" field.
func ProtoEQ(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProto), v))
	})
}

// ProtoNEQ applies the NEQ predicate on the "proto" field.
func ProtoNEQ(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProto), v))
	})
}

// ProtoIn applies the In predicate on the "proto" field.
func ProtoIn(vs ...string) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProto), v...))
	})
}

// ProtoNotIn applies the NotIn predicate on the "proto" field.
func ProtoNotIn(vs ...string) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProto), v...))
	})
}

// ProtoGT applies the GT predicate on the "proto" field.
func ProtoGT(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProto), v))
	})
}

// ProtoGTE applies the GTE predicate on the "proto" field.
func ProtoGTE(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProto), v))
	})
}

// ProtoLT applies the LT predicate on the "proto" field.
func ProtoLT(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProto), v))
	})
}

// ProtoLTE applies the LTE predicate on the "proto" field.
func ProtoLTE(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProto), v))
	})
}

// ProtoContains applies the Contains predicate on the "proto" field.
func ProtoContains(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProto), v))
	})
}

// ProtoHasPrefix applies the HasPrefix predicate on the "proto" field.
func ProtoHasPrefix(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProto), v))
	})
}

// ProtoHasSuffix applies the HasSuffix predicate on the "proto" field.
func ProtoHasSuffix(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProto), v))
	})
}

// ProtoEqualFold applies the EqualFold predicate on the "proto" field.
func ProtoEqualFold(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProto), v))
	})
}

// ProtoContainsFold applies the ContainsFold predicate on the "proto" field.
func ProtoContainsFold(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProto), v))
	})
}

// ProcessEQ applies the EQ predicate on the "process" field.
func ProcessEQ(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcess), v))
	})
}

// ProcessNEQ applies the NEQ predicate on the "process" field.
func ProcessNEQ(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcess), v))
	})
}

// ProcessIn applies the In predicate on the "process" field.
func ProcessIn(vs ...string) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProcess), v...))
	})
}

// ProcessNotIn applies the NotIn predicate on the "process" field.
func ProcessNotIn(vs ...string) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProcess), v...))
	})
}

// ProcessGT applies the GT predicate on the "process" field.
func ProcessGT(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcess), v))
	})
}

// ProcessGTE applies the GTE predicate on the "process" field.
func ProcessGTE(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcess), v))
	})
}

// ProcessLT applies the LT predicate on the "process" field.
func ProcessLT(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcess), v))
	})
}

// ProcessLTE applies the LTE predicate on the "process" field.
func ProcessLTE(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcess), v))
	})
}

// ProcessContains applies the Contains predicate on the "process" field.
func ProcessContains(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProcess), v))
	})
}

// ProcessHasPrefix applies the HasPrefix predicate on the "process" field.
func ProcessHasPrefix(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProcess), v))
	})
}

// ProcessHasSuffix applies the HasSuffix predicate on the "process" field.
func ProcessHasSuffix(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProcess), v))
	})
}

// ProcessEqualFold applies the EqualFold predicate on the "process" field.
func ProcessEqualFold(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProcess), v))
	})
}

// ProcessContainsFold applies the ContainsFold predicate on the "process" field.
func ProcessContainsFold(v string) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProcess), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Netstat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Netstat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasHostID applies the HasEdge predicate on the "host_id" edge.
func HasHostID() predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostIDTable, HostIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostIDWith applies the HasEdge predicate on the "host_id" edge with a given conditions (other predicates).
func HasHostIDWith(preds ...predicate.Host) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostIDTable, HostIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Netstat) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Netstat) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Netstat) predicate.Netstat {
	return predicate.Netstat(func(s *sql.Selector) {
		p(s.Not())
	})
}
