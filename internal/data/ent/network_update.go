// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/menta2l/go-hwc/internal/data/ent/host"
	"github.com/menta2l/go-hwc/internal/data/ent/network"
	"github.com/menta2l/go-hwc/internal/data/ent/predicate"
)

// NetworkUpdate is the builder for updating Network entities.
type NetworkUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkMutation
}

// Where appends a list predicates to the NetworkUpdate builder.
func (nu *NetworkUpdate) Where(ps ...predicate.Network) *NetworkUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetIndex sets the "Index" field.
func (nu *NetworkUpdate) SetIndex(i int) *NetworkUpdate {
	nu.mutation.ResetIndex()
	nu.mutation.SetIndex(i)
	return nu
}

// AddIndex adds i to the "Index" field.
func (nu *NetworkUpdate) AddIndex(i int) *NetworkUpdate {
	nu.mutation.AddIndex(i)
	return nu
}

// SetMTU sets the "MTU" field.
func (nu *NetworkUpdate) SetMTU(i int) *NetworkUpdate {
	nu.mutation.ResetMTU()
	nu.mutation.SetMTU(i)
	return nu
}

// AddMTU adds i to the "MTU" field.
func (nu *NetworkUpdate) AddMTU(i int) *NetworkUpdate {
	nu.mutation.AddMTU(i)
	return nu
}

// SetName sets the "name" field.
func (nu *NetworkUpdate) SetName(s string) *NetworkUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetHardwareAddr sets the "HardwareAddr" field.
func (nu *NetworkUpdate) SetHardwareAddr(s string) *NetworkUpdate {
	nu.mutation.SetHardwareAddr(s)
	return nu
}

// SetFlags sets the "Flags" field.
func (nu *NetworkUpdate) SetFlags(s []string) *NetworkUpdate {
	nu.mutation.SetFlags(s)
	return nu
}

// ClearFlags clears the value of the "Flags" field.
func (nu *NetworkUpdate) ClearFlags() *NetworkUpdate {
	nu.mutation.ClearFlags()
	return nu
}

// SetAddrs sets the "addrs" field.
func (nu *NetworkUpdate) SetAddrs(s []string) *NetworkUpdate {
	nu.mutation.SetAddrs(s)
	return nu
}

// ClearAddrs clears the value of the "addrs" field.
func (nu *NetworkUpdate) ClearAddrs() *NetworkUpdate {
	nu.mutation.ClearAddrs()
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NetworkUpdate) SetCreatedAt(t time.Time) *NetworkUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableCreatedAt(t *time.Time) *NetworkUpdate {
	if t != nil {
		nu.SetCreatedAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NetworkUpdate) SetUpdatedAt(t time.Time) *NetworkUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableUpdatedAt(t *time.Time) *NetworkUpdate {
	if t != nil {
		nu.SetUpdatedAt(*t)
	}
	return nu
}

// SetHostIDID sets the "host_id" edge to the Host entity by ID.
func (nu *NetworkUpdate) SetHostIDID(id string) *NetworkUpdate {
	nu.mutation.SetHostIDID(id)
	return nu
}

// SetHostID sets the "host_id" edge to the Host entity.
func (nu *NetworkUpdate) SetHostID(h *Host) *NetworkUpdate {
	return nu.SetHostIDID(h.ID)
}

// Mutation returns the NetworkMutation object of the builder.
func (nu *NetworkUpdate) Mutation() *NetworkMutation {
	return nu.mutation
}

// ClearHostID clears the "host_id" edge to the Host entity.
func (nu *NetworkUpdate) ClearHostID() *NetworkUpdate {
	nu.mutation.ClearHostID()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NetworkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetworkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NetworkUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NetworkUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NetworkUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NetworkUpdate) check() error {
	if _, ok := nu.mutation.HostIDID(); nu.mutation.HostIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Network.host_id"`)
	}
	return nil
}

func (nu *NetworkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   network.Table,
			Columns: network.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: network.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: network.FieldIndex,
		})
	}
	if value, ok := nu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: network.FieldIndex,
		})
	}
	if value, ok := nu.mutation.MTU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: network.FieldMTU,
		})
	}
	if value, ok := nu.mutation.AddedMTU(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: network.FieldMTU,
		})
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: network.FieldName,
		})
	}
	if value, ok := nu.mutation.HardwareAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: network.FieldHardwareAddr,
		})
	}
	if value, ok := nu.mutation.Flags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: network.FieldFlags,
		})
	}
	if nu.mutation.FlagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: network.FieldFlags,
		})
	}
	if value, ok := nu.mutation.Addrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: network.FieldAddrs,
		})
	}
	if nu.mutation.AddrsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: network.FieldAddrs,
		})
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: network.FieldCreatedAt,
		})
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: network.FieldUpdatedAt,
		})
	}
	if nu.mutation.HostIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.HostIDTable,
			Columns: []string{network.HostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.HostIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.HostIDTable,
			Columns: []string{network.HostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NetworkUpdateOne is the builder for updating a single Network entity.
type NetworkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetworkMutation
}

// SetIndex sets the "Index" field.
func (nuo *NetworkUpdateOne) SetIndex(i int) *NetworkUpdateOne {
	nuo.mutation.ResetIndex()
	nuo.mutation.SetIndex(i)
	return nuo
}

// AddIndex adds i to the "Index" field.
func (nuo *NetworkUpdateOne) AddIndex(i int) *NetworkUpdateOne {
	nuo.mutation.AddIndex(i)
	return nuo
}

// SetMTU sets the "MTU" field.
func (nuo *NetworkUpdateOne) SetMTU(i int) *NetworkUpdateOne {
	nuo.mutation.ResetMTU()
	nuo.mutation.SetMTU(i)
	return nuo
}

// AddMTU adds i to the "MTU" field.
func (nuo *NetworkUpdateOne) AddMTU(i int) *NetworkUpdateOne {
	nuo.mutation.AddMTU(i)
	return nuo
}

// SetName sets the "name" field.
func (nuo *NetworkUpdateOne) SetName(s string) *NetworkUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetHardwareAddr sets the "HardwareAddr" field.
func (nuo *NetworkUpdateOne) SetHardwareAddr(s string) *NetworkUpdateOne {
	nuo.mutation.SetHardwareAddr(s)
	return nuo
}

// SetFlags sets the "Flags" field.
func (nuo *NetworkUpdateOne) SetFlags(s []string) *NetworkUpdateOne {
	nuo.mutation.SetFlags(s)
	return nuo
}

// ClearFlags clears the value of the "Flags" field.
func (nuo *NetworkUpdateOne) ClearFlags() *NetworkUpdateOne {
	nuo.mutation.ClearFlags()
	return nuo
}

// SetAddrs sets the "addrs" field.
func (nuo *NetworkUpdateOne) SetAddrs(s []string) *NetworkUpdateOne {
	nuo.mutation.SetAddrs(s)
	return nuo
}

// ClearAddrs clears the value of the "addrs" field.
func (nuo *NetworkUpdateOne) ClearAddrs() *NetworkUpdateOne {
	nuo.mutation.ClearAddrs()
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NetworkUpdateOne) SetCreatedAt(t time.Time) *NetworkUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableCreatedAt(t *time.Time) *NetworkUpdateOne {
	if t != nil {
		nuo.SetCreatedAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NetworkUpdateOne) SetUpdatedAt(t time.Time) *NetworkUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableUpdatedAt(t *time.Time) *NetworkUpdateOne {
	if t != nil {
		nuo.SetUpdatedAt(*t)
	}
	return nuo
}

// SetHostIDID sets the "host_id" edge to the Host entity by ID.
func (nuo *NetworkUpdateOne) SetHostIDID(id string) *NetworkUpdateOne {
	nuo.mutation.SetHostIDID(id)
	return nuo
}

// SetHostID sets the "host_id" edge to the Host entity.
func (nuo *NetworkUpdateOne) SetHostID(h *Host) *NetworkUpdateOne {
	return nuo.SetHostIDID(h.ID)
}

// Mutation returns the NetworkMutation object of the builder.
func (nuo *NetworkUpdateOne) Mutation() *NetworkMutation {
	return nuo.mutation
}

// ClearHostID clears the "host_id" edge to the Host entity.
func (nuo *NetworkUpdateOne) ClearHostID() *NetworkUpdateOne {
	nuo.mutation.ClearHostID()
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NetworkUpdateOne) Select(field string, fields ...string) *NetworkUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Network entity.
func (nuo *NetworkUpdateOne) Save(ctx context.Context) (*Network, error) {
	var (
		err  error
		node *Network
	)
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetworkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NetworkUpdateOne) SaveX(ctx context.Context) *Network {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NetworkUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NetworkUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NetworkUpdateOne) check() error {
	if _, ok := nuo.mutation.HostIDID(); nuo.mutation.HostIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Network.host_id"`)
	}
	return nil
}

func (nuo *NetworkUpdateOne) sqlSave(ctx context.Context) (_node *Network, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   network.Table,
			Columns: network.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: network.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Network.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, network.FieldID)
		for _, f := range fields {
			if !network.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != network.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: network.FieldIndex,
		})
	}
	if value, ok := nuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: network.FieldIndex,
		})
	}
	if value, ok := nuo.mutation.MTU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: network.FieldMTU,
		})
	}
	if value, ok := nuo.mutation.AddedMTU(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: network.FieldMTU,
		})
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: network.FieldName,
		})
	}
	if value, ok := nuo.mutation.HardwareAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: network.FieldHardwareAddr,
		})
	}
	if value, ok := nuo.mutation.Flags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: network.FieldFlags,
		})
	}
	if nuo.mutation.FlagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: network.FieldFlags,
		})
	}
	if value, ok := nuo.mutation.Addrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: network.FieldAddrs,
		})
	}
	if nuo.mutation.AddrsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: network.FieldAddrs,
		})
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: network.FieldCreatedAt,
		})
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: network.FieldUpdatedAt,
		})
	}
	if nuo.mutation.HostIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.HostIDTable,
			Columns: []string{network.HostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.HostIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.HostIDTable,
			Columns: []string{network.HostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Network{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
