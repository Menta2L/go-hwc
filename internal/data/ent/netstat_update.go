// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/menta2l/go-hwc/internal/data/ent/host"
	"github.com/menta2l/go-hwc/internal/data/ent/netstat"
	"github.com/menta2l/go-hwc/internal/data/ent/predicate"
)

// NetstatUpdate is the builder for updating Netstat entities.
type NetstatUpdate struct {
	config
	hooks    []Hook
	mutation *NetstatMutation
}

// Where appends a list predicates to the NetstatUpdate builder.
func (nu *NetstatUpdate) Where(ps ...predicate.Netstat) *NetstatUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetAddr sets the "addr" field.
func (nu *NetstatUpdate) SetAddr(s string) *NetstatUpdate {
	nu.mutation.SetAddr(s)
	return nu
}

// SetPort sets the "port" field.
func (nu *NetstatUpdate) SetPort(u uint64) *NetstatUpdate {
	nu.mutation.ResetPort()
	nu.mutation.SetPort(u)
	return nu
}

// AddPort adds u to the "port" field.
func (nu *NetstatUpdate) AddPort(u int64) *NetstatUpdate {
	nu.mutation.AddPort(u)
	return nu
}

// SetProto sets the "proto" field.
func (nu *NetstatUpdate) SetProto(s string) *NetstatUpdate {
	nu.mutation.SetProto(s)
	return nu
}

// SetProcess sets the "process" field.
func (nu *NetstatUpdate) SetProcess(s string) *NetstatUpdate {
	nu.mutation.SetProcess(s)
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NetstatUpdate) SetCreatedAt(t time.Time) *NetstatUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NetstatUpdate) SetNillableCreatedAt(t *time.Time) *NetstatUpdate {
	if t != nil {
		nu.SetCreatedAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NetstatUpdate) SetUpdatedAt(t time.Time) *NetstatUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nu *NetstatUpdate) SetNillableUpdatedAt(t *time.Time) *NetstatUpdate {
	if t != nil {
		nu.SetUpdatedAt(*t)
	}
	return nu
}

// SetHostIDID sets the "host_id" edge to the Host entity by ID.
func (nu *NetstatUpdate) SetHostIDID(id string) *NetstatUpdate {
	nu.mutation.SetHostIDID(id)
	return nu
}

// SetHostID sets the "host_id" edge to the Host entity.
func (nu *NetstatUpdate) SetHostID(h *Host) *NetstatUpdate {
	return nu.SetHostIDID(h.ID)
}

// Mutation returns the NetstatMutation object of the builder.
func (nu *NetstatUpdate) Mutation() *NetstatMutation {
	return nu.mutation
}

// ClearHostID clears the "host_id" edge to the Host entity.
func (nu *NetstatUpdate) ClearHostID() *NetstatUpdate {
	nu.mutation.ClearHostID()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NetstatUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetstatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NetstatUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NetstatUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NetstatUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NetstatUpdate) check() error {
	if _, ok := nu.mutation.HostIDID(); nu.mutation.HostIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Netstat.host_id"`)
	}
	return nil
}

func (nu *NetstatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   netstat.Table,
			Columns: netstat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netstat.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Addr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netstat.FieldAddr,
		})
	}
	if value, ok := nu.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: netstat.FieldPort,
		})
	}
	if value, ok := nu.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: netstat.FieldPort,
		})
	}
	if value, ok := nu.mutation.Proto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netstat.FieldProto,
		})
	}
	if value, ok := nu.mutation.Process(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netstat.FieldProcess,
		})
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: netstat.FieldCreatedAt,
		})
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: netstat.FieldUpdatedAt,
		})
	}
	if nu.mutation.HostIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netstat.HostIDTable,
			Columns: []string{netstat.HostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.HostIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netstat.HostIDTable,
			Columns: []string{netstat.HostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{netstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NetstatUpdateOne is the builder for updating a single Netstat entity.
type NetstatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetstatMutation
}

// SetAddr sets the "addr" field.
func (nuo *NetstatUpdateOne) SetAddr(s string) *NetstatUpdateOne {
	nuo.mutation.SetAddr(s)
	return nuo
}

// SetPort sets the "port" field.
func (nuo *NetstatUpdateOne) SetPort(u uint64) *NetstatUpdateOne {
	nuo.mutation.ResetPort()
	nuo.mutation.SetPort(u)
	return nuo
}

// AddPort adds u to the "port" field.
func (nuo *NetstatUpdateOne) AddPort(u int64) *NetstatUpdateOne {
	nuo.mutation.AddPort(u)
	return nuo
}

// SetProto sets the "proto" field.
func (nuo *NetstatUpdateOne) SetProto(s string) *NetstatUpdateOne {
	nuo.mutation.SetProto(s)
	return nuo
}

// SetProcess sets the "process" field.
func (nuo *NetstatUpdateOne) SetProcess(s string) *NetstatUpdateOne {
	nuo.mutation.SetProcess(s)
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NetstatUpdateOne) SetCreatedAt(t time.Time) *NetstatUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NetstatUpdateOne) SetNillableCreatedAt(t *time.Time) *NetstatUpdateOne {
	if t != nil {
		nuo.SetCreatedAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NetstatUpdateOne) SetUpdatedAt(t time.Time) *NetstatUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nuo *NetstatUpdateOne) SetNillableUpdatedAt(t *time.Time) *NetstatUpdateOne {
	if t != nil {
		nuo.SetUpdatedAt(*t)
	}
	return nuo
}

// SetHostIDID sets the "host_id" edge to the Host entity by ID.
func (nuo *NetstatUpdateOne) SetHostIDID(id string) *NetstatUpdateOne {
	nuo.mutation.SetHostIDID(id)
	return nuo
}

// SetHostID sets the "host_id" edge to the Host entity.
func (nuo *NetstatUpdateOne) SetHostID(h *Host) *NetstatUpdateOne {
	return nuo.SetHostIDID(h.ID)
}

// Mutation returns the NetstatMutation object of the builder.
func (nuo *NetstatUpdateOne) Mutation() *NetstatMutation {
	return nuo.mutation
}

// ClearHostID clears the "host_id" edge to the Host entity.
func (nuo *NetstatUpdateOne) ClearHostID() *NetstatUpdateOne {
	nuo.mutation.ClearHostID()
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NetstatUpdateOne) Select(field string, fields ...string) *NetstatUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Netstat entity.
func (nuo *NetstatUpdateOne) Save(ctx context.Context) (*Netstat, error) {
	var (
		err  error
		node *Netstat
	)
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetstatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NetstatUpdateOne) SaveX(ctx context.Context) *Netstat {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NetstatUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NetstatUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NetstatUpdateOne) check() error {
	if _, ok := nuo.mutation.HostIDID(); nuo.mutation.HostIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Netstat.host_id"`)
	}
	return nil
}

func (nuo *NetstatUpdateOne) sqlSave(ctx context.Context) (_node *Netstat, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   netstat.Table,
			Columns: netstat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netstat.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Netstat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, netstat.FieldID)
		for _, f := range fields {
			if !netstat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != netstat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Addr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netstat.FieldAddr,
		})
	}
	if value, ok := nuo.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: netstat.FieldPort,
		})
	}
	if value, ok := nuo.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: netstat.FieldPort,
		})
	}
	if value, ok := nuo.mutation.Proto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netstat.FieldProto,
		})
	}
	if value, ok := nuo.mutation.Process(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netstat.FieldProcess,
		})
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: netstat.FieldCreatedAt,
		})
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: netstat.FieldUpdatedAt,
		})
	}
	if nuo.mutation.HostIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netstat.HostIDTable,
			Columns: []string{netstat.HostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.HostIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netstat.HostIDTable,
			Columns: []string{netstat.HostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Netstat{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{netstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
