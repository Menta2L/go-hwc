// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CpusColumns holds the columns for the "cpus" table.
	CpusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "vendor_id", Type: field.TypeString},
		{Name: "family", Type: field.TypeString},
		{Name: "model", Type: field.TypeString},
		{Name: "model_name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "host_cpu_id", Type: field.TypeString, Nullable: true},
	}
	// CpusTable holds the schema information for the "cpus" table.
	CpusTable = &schema.Table{
		Name:       "cpus",
		Columns:    CpusColumns,
		PrimaryKey: []*schema.Column{CpusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cpus_hosts_cpu_id",
				Columns:    []*schema.Column{CpusColumns[7]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DisksColumns holds the columns for the "disks" table.
	DisksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "device", Type: field.TypeString},
		{Name: "mount", Type: field.TypeString},
		{Name: "fs_type", Type: field.TypeString},
		{Name: "opts", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "text[]"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "host_disk_id", Type: field.TypeString},
	}
	// DisksTable holds the schema information for the "disks" table.
	DisksTable = &schema.Table{
		Name:       "disks",
		Columns:    DisksColumns,
		PrimaryKey: []*schema.Column{DisksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "disks_hosts_disk_id",
				Columns:    []*schema.Column{DisksColumns[7]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HostsColumns holds the columns for the "hosts" table.
	HostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "hostname", Type: field.TypeString},
		{Name: "os", Type: field.TypeString},
		{Name: "platform", Type: field.TypeString},
		{Name: "platform_family", Type: field.TypeString},
		{Name: "platform_version", Type: field.TypeString},
		{Name: "kernel_version", Type: field.TypeString},
		{Name: "kernel_arch", Type: field.TypeString},
		{Name: "virtualization_system", Type: field.TypeString},
		{Name: "virtualization_role", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// HostsTable holds the schema information for the "hosts" table.
	HostsTable = &schema.Table{
		Name:       "hosts",
		Columns:    HostsColumns,
		PrimaryKey: []*schema.Column{HostsColumns[0]},
	}
	// NetstatsColumns holds the columns for the "netstats" table.
	NetstatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "addr", Type: field.TypeString},
		{Name: "port", Type: field.TypeUint64},
		{Name: "proto", Type: field.TypeString},
		{Name: "process", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "host_netstat_id", Type: field.TypeString},
	}
	// NetstatsTable holds the schema information for the "netstats" table.
	NetstatsTable = &schema.Table{
		Name:       "netstats",
		Columns:    NetstatsColumns,
		PrimaryKey: []*schema.Column{NetstatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "netstats_hosts_netstat_id",
				Columns:    []*schema.Column{NetstatsColumns[7]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// NetworksColumns holds the columns for the "networks" table.
	NetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "idx", Type: field.TypeInt},
		{Name: "mtu", Type: field.TypeInt},
		{Name: "name", Type: field.TypeString},
		{Name: "mac", Type: field.TypeString},
		{Name: "flags", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "text[]"}},
		{Name: "addrs", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "text[]"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "host_network_id", Type: field.TypeString},
	}
	// NetworksTable holds the schema information for the "networks" table.
	NetworksTable = &schema.Table{
		Name:       "networks",
		Columns:    NetworksColumns,
		PrimaryKey: []*schema.Column{NetworksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "networks_hosts_network_id",
				Columns:    []*schema.Column{NetworksColumns[9]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CpusTable,
		DisksTable,
		HostsTable,
		NetstatsTable,
		NetworksTable,
	}
)

func init() {
	CpusTable.ForeignKeys[0].RefTable = HostsTable
	DisksTable.ForeignKeys[0].RefTable = HostsTable
	NetstatsTable.ForeignKeys[0].RefTable = HostsTable
	NetworksTable.ForeignKeys[0].RefTable = HostsTable
}
