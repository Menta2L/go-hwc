// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/menta2l/go-hwc/internal/data/ent/host"
)

// Host is the model entity for the Host schema.
type Host struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// PlatformFamily holds the value of the "platform_family" field.
	PlatformFamily string `json:"platform_family,omitempty"`
	// PlatformVersion holds the value of the "platform_version" field.
	PlatformVersion string `json:"platform_version,omitempty"`
	// KernelVersion holds the value of the "kernel_version" field.
	KernelVersion string `json:"kernel_version,omitempty"`
	// KernelArch holds the value of the "kernel_arch" field.
	KernelArch string `json:"kernel_arch,omitempty"`
	// VirtualizationSystem holds the value of the "virtualization_system" field.
	VirtualizationSystem string `json:"virtualization_system,omitempty"`
	// VirtualizationRole holds the value of the "virtualization_role" field.
	VirtualizationRole string `json:"virtualization_role,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostQuery when eager-loading is set.
	Edges HostEdges `json:"edges"`
}

// HostEdges holds the relations/edges for other nodes in the graph.
type HostEdges struct {
	// CPUID holds the value of the cpu_id edge.
	CPUID []*Cpu `json:"cpu_id,omitempty"`
	// NetworkID holds the value of the network_id edge.
	NetworkID []*Network `json:"network_id,omitempty"`
	// NetstatID holds the value of the netstat_id edge.
	NetstatID []*Netstat `json:"netstat_id,omitempty"`
	// DiskID holds the value of the disk_id edge.
	DiskID []*Disk `json:"disk_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CPUIDOrErr returns the CPUID value or an error if the edge
// was not loaded in eager-loading.
func (e HostEdges) CPUIDOrErr() ([]*Cpu, error) {
	if e.loadedTypes[0] {
		return e.CPUID, nil
	}
	return nil, &NotLoadedError{edge: "cpu_id"}
}

// NetworkIDOrErr returns the NetworkID value or an error if the edge
// was not loaded in eager-loading.
func (e HostEdges) NetworkIDOrErr() ([]*Network, error) {
	if e.loadedTypes[1] {
		return e.NetworkID, nil
	}
	return nil, &NotLoadedError{edge: "network_id"}
}

// NetstatIDOrErr returns the NetstatID value or an error if the edge
// was not loaded in eager-loading.
func (e HostEdges) NetstatIDOrErr() ([]*Netstat, error) {
	if e.loadedTypes[2] {
		return e.NetstatID, nil
	}
	return nil, &NotLoadedError{edge: "netstat_id"}
}

// DiskIDOrErr returns the DiskID value or an error if the edge
// was not loaded in eager-loading.
func (e HostEdges) DiskIDOrErr() ([]*Disk, error) {
	if e.loadedTypes[3] {
		return e.DiskID, nil
	}
	return nil, &NotLoadedError{edge: "disk_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Host) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case host.FieldID, host.FieldHostname, host.FieldOs, host.FieldPlatform, host.FieldPlatformFamily, host.FieldPlatformVersion, host.FieldKernelVersion, host.FieldKernelArch, host.FieldVirtualizationSystem, host.FieldVirtualizationRole:
			values[i] = new(sql.NullString)
		case host.FieldCreatedAt, host.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Host", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Host fields.
func (h *Host) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case host.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				h.ID = value.String
			}
		case host.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				h.Hostname = value.String
			}
		case host.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				h.Os = value.String
			}
		case host.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				h.Platform = value.String
			}
		case host.FieldPlatformFamily:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_family", values[i])
			} else if value.Valid {
				h.PlatformFamily = value.String
			}
		case host.FieldPlatformVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_version", values[i])
			} else if value.Valid {
				h.PlatformVersion = value.String
			}
		case host.FieldKernelVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kernel_version", values[i])
			} else if value.Valid {
				h.KernelVersion = value.String
			}
		case host.FieldKernelArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kernel_arch", values[i])
			} else if value.Valid {
				h.KernelArch = value.String
			}
		case host.FieldVirtualizationSystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field virtualization_system", values[i])
			} else if value.Valid {
				h.VirtualizationSystem = value.String
			}
		case host.FieldVirtualizationRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field virtualization_role", values[i])
			} else if value.Valid {
				h.VirtualizationRole = value.String
			}
		case host.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case host.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				h.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCPUID queries the "cpu_id" edge of the Host entity.
func (h *Host) QueryCPUID() *CPUQuery {
	return (&HostClient{config: h.config}).QueryCPUID(h)
}

// QueryNetworkID queries the "network_id" edge of the Host entity.
func (h *Host) QueryNetworkID() *NetworkQuery {
	return (&HostClient{config: h.config}).QueryNetworkID(h)
}

// QueryNetstatID queries the "netstat_id" edge of the Host entity.
func (h *Host) QueryNetstatID() *NetstatQuery {
	return (&HostClient{config: h.config}).QueryNetstatID(h)
}

// QueryDiskID queries the "disk_id" edge of the Host entity.
func (h *Host) QueryDiskID() *DiskQuery {
	return (&HostClient{config: h.config}).QueryDiskID(h)
}

// Update returns a builder for updating this Host.
// Note that you need to call Host.Unwrap() before calling this method if this Host
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Host) Update() *HostUpdateOne {
	return (&HostClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Host entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Host) Unwrap() *Host {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Host is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Host) String() string {
	var builder strings.Builder
	builder.WriteString("Host(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", hostname=")
	builder.WriteString(h.Hostname)
	builder.WriteString(", os=")
	builder.WriteString(h.Os)
	builder.WriteString(", platform=")
	builder.WriteString(h.Platform)
	builder.WriteString(", platform_family=")
	builder.WriteString(h.PlatformFamily)
	builder.WriteString(", platform_version=")
	builder.WriteString(h.PlatformVersion)
	builder.WriteString(", kernel_version=")
	builder.WriteString(h.KernelVersion)
	builder.WriteString(", kernel_arch=")
	builder.WriteString(h.KernelArch)
	builder.WriteString(", virtualization_system=")
	builder.WriteString(h.VirtualizationSystem)
	builder.WriteString(", virtualization_role=")
	builder.WriteString(h.VirtualizationRole)
	builder.WriteString(", created_at=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(h.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Hosts is a parsable slice of Host.
type Hosts []*Host

func (h Hosts) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
