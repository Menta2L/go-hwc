// Code generated by entc, DO NOT EDIT.

package cpu

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/menta2l/go-hwc/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// VendorID applies equality check predicate on the "vendor_id" field. It's identical to VendorIDEQ.
func VendorID(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorID), v))
	})
}

// Family applies equality check predicate on the "family" field. It's identical to FamilyEQ.
func Family(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFamily), v))
	})
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// ModelName applies equality check predicate on the "model_name" field. It's identical to ModelNameEQ.
func ModelName(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModelName), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// VendorIDEQ applies the EQ predicate on the "vendor_id" field.
func VendorIDEQ(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorID), v))
	})
}

// VendorIDNEQ applies the NEQ predicate on the "vendor_id" field.
func VendorIDNEQ(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVendorID), v))
	})
}

// VendorIDIn applies the In predicate on the "vendor_id" field.
func VendorIDIn(vs ...string) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVendorID), v...))
	})
}

// VendorIDNotIn applies the NotIn predicate on the "vendor_id" field.
func VendorIDNotIn(vs ...string) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVendorID), v...))
	})
}

// VendorIDGT applies the GT predicate on the "vendor_id" field.
func VendorIDGT(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVendorID), v))
	})
}

// VendorIDGTE applies the GTE predicate on the "vendor_id" field.
func VendorIDGTE(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVendorID), v))
	})
}

// VendorIDLT applies the LT predicate on the "vendor_id" field.
func VendorIDLT(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVendorID), v))
	})
}

// VendorIDLTE applies the LTE predicate on the "vendor_id" field.
func VendorIDLTE(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVendorID), v))
	})
}

// VendorIDContains applies the Contains predicate on the "vendor_id" field.
func VendorIDContains(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVendorID), v))
	})
}

// VendorIDHasPrefix applies the HasPrefix predicate on the "vendor_id" field.
func VendorIDHasPrefix(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVendorID), v))
	})
}

// VendorIDHasSuffix applies the HasSuffix predicate on the "vendor_id" field.
func VendorIDHasSuffix(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVendorID), v))
	})
}

// VendorIDEqualFold applies the EqualFold predicate on the "vendor_id" field.
func VendorIDEqualFold(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVendorID), v))
	})
}

// VendorIDContainsFold applies the ContainsFold predicate on the "vendor_id" field.
func VendorIDContainsFold(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVendorID), v))
	})
}

// FamilyEQ applies the EQ predicate on the "family" field.
func FamilyEQ(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFamily), v))
	})
}

// FamilyNEQ applies the NEQ predicate on the "family" field.
func FamilyNEQ(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFamily), v))
	})
}

// FamilyIn applies the In predicate on the "family" field.
func FamilyIn(vs ...string) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFamily), v...))
	})
}

// FamilyNotIn applies the NotIn predicate on the "family" field.
func FamilyNotIn(vs ...string) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFamily), v...))
	})
}

// FamilyGT applies the GT predicate on the "family" field.
func FamilyGT(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFamily), v))
	})
}

// FamilyGTE applies the GTE predicate on the "family" field.
func FamilyGTE(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFamily), v))
	})
}

// FamilyLT applies the LT predicate on the "family" field.
func FamilyLT(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFamily), v))
	})
}

// FamilyLTE applies the LTE predicate on the "family" field.
func FamilyLTE(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFamily), v))
	})
}

// FamilyContains applies the Contains predicate on the "family" field.
func FamilyContains(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFamily), v))
	})
}

// FamilyHasPrefix applies the HasPrefix predicate on the "family" field.
func FamilyHasPrefix(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFamily), v))
	})
}

// FamilyHasSuffix applies the HasSuffix predicate on the "family" field.
func FamilyHasSuffix(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFamily), v))
	})
}

// FamilyEqualFold applies the EqualFold predicate on the "family" field.
func FamilyEqualFold(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFamily), v))
	})
}

// FamilyContainsFold applies the ContainsFold predicate on the "family" field.
func FamilyContainsFold(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFamily), v))
	})
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModel), v))
	})
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModel), v...))
	})
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModel), v...))
	})
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModel), v))
	})
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModel), v))
	})
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModel), v))
	})
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModel), v))
	})
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldModel), v))
	})
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldModel), v))
	})
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldModel), v))
	})
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldModel), v))
	})
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldModel), v))
	})
}

// ModelNameEQ applies the EQ predicate on the "model_name" field.
func ModelNameEQ(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModelName), v))
	})
}

// ModelNameNEQ applies the NEQ predicate on the "model_name" field.
func ModelNameNEQ(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModelName), v))
	})
}

// ModelNameIn applies the In predicate on the "model_name" field.
func ModelNameIn(vs ...string) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModelName), v...))
	})
}

// ModelNameNotIn applies the NotIn predicate on the "model_name" field.
func ModelNameNotIn(vs ...string) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModelName), v...))
	})
}

// ModelNameGT applies the GT predicate on the "model_name" field.
func ModelNameGT(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModelName), v))
	})
}

// ModelNameGTE applies the GTE predicate on the "model_name" field.
func ModelNameGTE(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModelName), v))
	})
}

// ModelNameLT applies the LT predicate on the "model_name" field.
func ModelNameLT(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModelName), v))
	})
}

// ModelNameLTE applies the LTE predicate on the "model_name" field.
func ModelNameLTE(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModelName), v))
	})
}

// ModelNameContains applies the Contains predicate on the "model_name" field.
func ModelNameContains(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldModelName), v))
	})
}

// ModelNameHasPrefix applies the HasPrefix predicate on the "model_name" field.
func ModelNameHasPrefix(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldModelName), v))
	})
}

// ModelNameHasSuffix applies the HasSuffix predicate on the "model_name" field.
func ModelNameHasSuffix(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldModelName), v))
	})
}

// ModelNameEqualFold applies the EqualFold predicate on the "model_name" field.
func ModelNameEqualFold(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldModelName), v))
	})
}

// ModelNameContainsFold applies the ContainsFold predicate on the "model_name" field.
func ModelNameContainsFold(v string) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldModelName), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Cpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasHostID applies the HasEdge predicate on the "host_id" edge.
func HasHostID() predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostIDTable, HostIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostIDWith applies the HasEdge predicate on the "host_id" edge with a given conditions (other predicates).
func HasHostIDWith(preds ...predicate.Host) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostIDTable, HostIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cpu) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cpu) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cpu) predicate.Cpu {
	return predicate.Cpu(func(s *sql.Selector) {
		p(s.Not())
	})
}
