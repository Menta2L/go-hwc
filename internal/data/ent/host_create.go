// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/menta2l/go-hwc/internal/data/ent/cpu"
	"github.com/menta2l/go-hwc/internal/data/ent/disk"
	"github.com/menta2l/go-hwc/internal/data/ent/host"
	"github.com/menta2l/go-hwc/internal/data/ent/netstat"
	"github.com/menta2l/go-hwc/internal/data/ent/network"
)

// HostCreate is the builder for creating a Host entity.
type HostCreate struct {
	config
	mutation *HostMutation
	hooks    []Hook
}

// SetHostname sets the "hostname" field.
func (hc *HostCreate) SetHostname(s string) *HostCreate {
	hc.mutation.SetHostname(s)
	return hc
}

// SetOs sets the "os" field.
func (hc *HostCreate) SetOs(s string) *HostCreate {
	hc.mutation.SetOs(s)
	return hc
}

// SetPlatform sets the "platform" field.
func (hc *HostCreate) SetPlatform(s string) *HostCreate {
	hc.mutation.SetPlatform(s)
	return hc
}

// SetPlatformFamily sets the "platform_family" field.
func (hc *HostCreate) SetPlatformFamily(s string) *HostCreate {
	hc.mutation.SetPlatformFamily(s)
	return hc
}

// SetPlatformVersion sets the "platform_version" field.
func (hc *HostCreate) SetPlatformVersion(s string) *HostCreate {
	hc.mutation.SetPlatformVersion(s)
	return hc
}

// SetKernelVersion sets the "kernel_version" field.
func (hc *HostCreate) SetKernelVersion(s string) *HostCreate {
	hc.mutation.SetKernelVersion(s)
	return hc
}

// SetKernelArch sets the "kernel_arch" field.
func (hc *HostCreate) SetKernelArch(s string) *HostCreate {
	hc.mutation.SetKernelArch(s)
	return hc
}

// SetVirtualizationSystem sets the "virtualization_system" field.
func (hc *HostCreate) SetVirtualizationSystem(s string) *HostCreate {
	hc.mutation.SetVirtualizationSystem(s)
	return hc
}

// SetVirtualizationRole sets the "virtualization_role" field.
func (hc *HostCreate) SetVirtualizationRole(s string) *HostCreate {
	hc.mutation.SetVirtualizationRole(s)
	return hc
}

// SetCreatedAt sets the "created_at" field.
func (hc *HostCreate) SetCreatedAt(t time.Time) *HostCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HostCreate) SetNillableCreatedAt(t *time.Time) *HostCreate {
	if t != nil {
		hc.SetCreatedAt(*t)
	}
	return hc
}

// SetUpdatedAt sets the "updated_at" field.
func (hc *HostCreate) SetUpdatedAt(t time.Time) *HostCreate {
	hc.mutation.SetUpdatedAt(t)
	return hc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hc *HostCreate) SetNillableUpdatedAt(t *time.Time) *HostCreate {
	if t != nil {
		hc.SetUpdatedAt(*t)
	}
	return hc
}

// SetID sets the "id" field.
func (hc *HostCreate) SetID(s string) *HostCreate {
	hc.mutation.SetID(s)
	return hc
}

// AddCPUIDs adds the "cpu" edge to the Cpu entity by IDs.
func (hc *HostCreate) AddCPUIDs(ids ...int) *HostCreate {
	hc.mutation.AddCPUIDs(ids...)
	return hc
}

// AddCPU adds the "cpu" edges to the Cpu entity.
func (hc *HostCreate) AddCPU(c ...*Cpu) *HostCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hc.AddCPUIDs(ids...)
}

// AddNetworkIDs adds the "network" edge to the Network entity by IDs.
func (hc *HostCreate) AddNetworkIDs(ids ...int) *HostCreate {
	hc.mutation.AddNetworkIDs(ids...)
	return hc
}

// AddNetwork adds the "network" edges to the Network entity.
func (hc *HostCreate) AddNetwork(n ...*Network) *HostCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return hc.AddNetworkIDs(ids...)
}

// AddNetstatIDs adds the "netstat" edge to the Netstat entity by IDs.
func (hc *HostCreate) AddNetstatIDs(ids ...int) *HostCreate {
	hc.mutation.AddNetstatIDs(ids...)
	return hc
}

// AddNetstat adds the "netstat" edges to the Netstat entity.
func (hc *HostCreate) AddNetstat(n ...*Netstat) *HostCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return hc.AddNetstatIDs(ids...)
}

// AddDiskIDs adds the "disk" edge to the Disk entity by IDs.
func (hc *HostCreate) AddDiskIDs(ids ...int) *HostCreate {
	hc.mutation.AddDiskIDs(ids...)
	return hc
}

// AddDisk adds the "disk" edges to the Disk entity.
func (hc *HostCreate) AddDisk(d ...*Disk) *HostCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return hc.AddDiskIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (hc *HostCreate) Mutation() *HostMutation {
	return hc.mutation
}

// Save creates the Host in the database.
func (hc *HostCreate) Save(ctx context.Context) (*Host, error) {
	var (
		err  error
		node *Host
	)
	hc.defaults()
	if len(hc.hooks) == 0 {
		if err = hc.check(); err != nil {
			return nil, err
		}
		node, err = hc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hc.check(); err != nil {
				return nil, err
			}
			hc.mutation = mutation
			if node, err = hc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(hc.hooks) - 1; i >= 0; i-- {
			if hc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HostCreate) SaveX(ctx context.Context) *Host {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HostCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HostCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HostCreate) defaults() {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		v := host.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		v := host.DefaultUpdatedAt()
		hc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HostCreate) check() error {
	if _, ok := hc.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`ent: missing required field "Host.hostname"`)}
	}
	if _, ok := hc.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`ent: missing required field "Host.os"`)}
	}
	if _, ok := hc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Host.platform"`)}
	}
	if _, ok := hc.mutation.PlatformFamily(); !ok {
		return &ValidationError{Name: "platform_family", err: errors.New(`ent: missing required field "Host.platform_family"`)}
	}
	if _, ok := hc.mutation.PlatformVersion(); !ok {
		return &ValidationError{Name: "platform_version", err: errors.New(`ent: missing required field "Host.platform_version"`)}
	}
	if _, ok := hc.mutation.KernelVersion(); !ok {
		return &ValidationError{Name: "kernel_version", err: errors.New(`ent: missing required field "Host.kernel_version"`)}
	}
	if _, ok := hc.mutation.KernelArch(); !ok {
		return &ValidationError{Name: "kernel_arch", err: errors.New(`ent: missing required field "Host.kernel_arch"`)}
	}
	if _, ok := hc.mutation.VirtualizationSystem(); !ok {
		return &ValidationError{Name: "virtualization_system", err: errors.New(`ent: missing required field "Host.virtualization_system"`)}
	}
	if _, ok := hc.mutation.VirtualizationRole(); !ok {
		return &ValidationError{Name: "virtualization_role", err: errors.New(`ent: missing required field "Host.virtualization_role"`)}
	}
	if _, ok := hc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Host.created_at"`)}
	}
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Host.updated_at"`)}
	}
	return nil
}

func (hc *HostCreate) sqlSave(ctx context.Context) (*Host, error) {
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Host.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (hc *HostCreate) createSpec() (*Host, *sqlgraph.CreateSpec) {
	var (
		_node = &Host{config: hc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: host.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: host.FieldID,
			},
		}
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.Hostname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHostname,
		})
		_node.Hostname = value
	}
	if value, ok := hc.mutation.Os(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldOs,
		})
		_node.Os = value
	}
	if value, ok := hc.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldPlatform,
		})
		_node.Platform = value
	}
	if value, ok := hc.mutation.PlatformFamily(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldPlatformFamily,
		})
		_node.PlatformFamily = value
	}
	if value, ok := hc.mutation.PlatformVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldPlatformVersion,
		})
		_node.PlatformVersion = value
	}
	if value, ok := hc.mutation.KernelVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldKernelVersion,
		})
		_node.KernelVersion = value
	}
	if value, ok := hc.mutation.KernelArch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldKernelArch,
		})
		_node.KernelArch = value
	}
	if value, ok := hc.mutation.VirtualizationSystem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldVirtualizationSystem,
		})
		_node.VirtualizationSystem = value
	}
	if value, ok := hc.mutation.VirtualizationRole(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldVirtualizationRole,
		})
		_node.VirtualizationRole = value
	}
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: host.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := hc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: host.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := hc.mutation.CPUIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.CPUTable,
			Columns: []string{host.CPUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cpu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetworkTable,
			Columns: []string{host.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.NetstatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.NetstatTable,
			Columns: []string{host.NetstatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.DiskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.DiskTable,
			Columns: []string{host.DiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HostCreateBulk is the builder for creating many Host entities in bulk.
type HostCreateBulk struct {
	config
	builders []*HostCreate
}

// Save creates the Host entities in the database.
func (hcb *HostCreateBulk) Save(ctx context.Context) ([]*Host, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Host, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HostCreateBulk) SaveX(ctx context.Context) []*Host {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HostCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HostCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
