// Code generated by entc, DO NOT EDIT.

package host

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/menta2l/go-hwc/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOs), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformFamily applies equality check predicate on the "platform_family" field. It's identical to PlatformFamilyEQ.
func PlatformFamily(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformFamily), v))
	})
}

// PlatformVersion applies equality check predicate on the "platform_version" field. It's identical to PlatformVersionEQ.
func PlatformVersion(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformVersion), v))
	})
}

// KernelVersion applies equality check predicate on the "kernel_version" field. It's identical to KernelVersionEQ.
func KernelVersion(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKernelVersion), v))
	})
}

// KernelArch applies equality check predicate on the "kernel_arch" field. It's identical to KernelArchEQ.
func KernelArch(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKernelArch), v))
	})
}

// VirtualizationSystem applies equality check predicate on the "virtualization_system" field. It's identical to VirtualizationSystemEQ.
func VirtualizationSystem(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationRole applies equality check predicate on the "virtualization_role" field. It's identical to VirtualizationRoleEQ.
func VirtualizationRole(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVirtualizationRole), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHostname), v))
	})
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHostname), v...))
	})
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHostname), v...))
	})
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHostname), v))
	})
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHostname), v))
	})
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHostname), v))
	})
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHostname), v))
	})
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHostname), v))
	})
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHostname), v))
	})
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHostname), v))
	})
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHostname), v))
	})
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHostname), v))
	})
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOs), v))
	})
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOs), v))
	})
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOs), v...))
	})
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOs), v...))
	})
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOs), v))
	})
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOs), v))
	})
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOs), v))
	})
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOs), v))
	})
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOs), v))
	})
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOs), v))
	})
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOs), v))
	})
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOs), v))
	})
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOs), v))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// PlatformFamilyEQ applies the EQ predicate on the "platform_family" field.
func PlatformFamilyEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformFamily), v))
	})
}

// PlatformFamilyNEQ applies the NEQ predicate on the "platform_family" field.
func PlatformFamilyNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformFamily), v))
	})
}

// PlatformFamilyIn applies the In predicate on the "platform_family" field.
func PlatformFamilyIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatformFamily), v...))
	})
}

// PlatformFamilyNotIn applies the NotIn predicate on the "platform_family" field.
func PlatformFamilyNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatformFamily), v...))
	})
}

// PlatformFamilyGT applies the GT predicate on the "platform_family" field.
func PlatformFamilyGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformFamily), v))
	})
}

// PlatformFamilyGTE applies the GTE predicate on the "platform_family" field.
func PlatformFamilyGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformFamily), v))
	})
}

// PlatformFamilyLT applies the LT predicate on the "platform_family" field.
func PlatformFamilyLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformFamily), v))
	})
}

// PlatformFamilyLTE applies the LTE predicate on the "platform_family" field.
func PlatformFamilyLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformFamily), v))
	})
}

// PlatformFamilyContains applies the Contains predicate on the "platform_family" field.
func PlatformFamilyContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformFamily), v))
	})
}

// PlatformFamilyHasPrefix applies the HasPrefix predicate on the "platform_family" field.
func PlatformFamilyHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformFamily), v))
	})
}

// PlatformFamilyHasSuffix applies the HasSuffix predicate on the "platform_family" field.
func PlatformFamilyHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformFamily), v))
	})
}

// PlatformFamilyEqualFold applies the EqualFold predicate on the "platform_family" field.
func PlatformFamilyEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformFamily), v))
	})
}

// PlatformFamilyContainsFold applies the ContainsFold predicate on the "platform_family" field.
func PlatformFamilyContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformFamily), v))
	})
}

// PlatformVersionEQ applies the EQ predicate on the "platform_version" field.
func PlatformVersionEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformVersion), v))
	})
}

// PlatformVersionNEQ applies the NEQ predicate on the "platform_version" field.
func PlatformVersionNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformVersion), v))
	})
}

// PlatformVersionIn applies the In predicate on the "platform_version" field.
func PlatformVersionIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatformVersion), v...))
	})
}

// PlatformVersionNotIn applies the NotIn predicate on the "platform_version" field.
func PlatformVersionNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatformVersion), v...))
	})
}

// PlatformVersionGT applies the GT predicate on the "platform_version" field.
func PlatformVersionGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformVersion), v))
	})
}

// PlatformVersionGTE applies the GTE predicate on the "platform_version" field.
func PlatformVersionGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformVersion), v))
	})
}

// PlatformVersionLT applies the LT predicate on the "platform_version" field.
func PlatformVersionLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformVersion), v))
	})
}

// PlatformVersionLTE applies the LTE predicate on the "platform_version" field.
func PlatformVersionLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformVersion), v))
	})
}

// PlatformVersionContains applies the Contains predicate on the "platform_version" field.
func PlatformVersionContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformVersion), v))
	})
}

// PlatformVersionHasPrefix applies the HasPrefix predicate on the "platform_version" field.
func PlatformVersionHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformVersion), v))
	})
}

// PlatformVersionHasSuffix applies the HasSuffix predicate on the "platform_version" field.
func PlatformVersionHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformVersion), v))
	})
}

// PlatformVersionEqualFold applies the EqualFold predicate on the "platform_version" field.
func PlatformVersionEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformVersion), v))
	})
}

// PlatformVersionContainsFold applies the ContainsFold predicate on the "platform_version" field.
func PlatformVersionContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformVersion), v))
	})
}

// KernelVersionEQ applies the EQ predicate on the "kernel_version" field.
func KernelVersionEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKernelVersion), v))
	})
}

// KernelVersionNEQ applies the NEQ predicate on the "kernel_version" field.
func KernelVersionNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKernelVersion), v))
	})
}

// KernelVersionIn applies the In predicate on the "kernel_version" field.
func KernelVersionIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKernelVersion), v...))
	})
}

// KernelVersionNotIn applies the NotIn predicate on the "kernel_version" field.
func KernelVersionNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKernelVersion), v...))
	})
}

// KernelVersionGT applies the GT predicate on the "kernel_version" field.
func KernelVersionGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKernelVersion), v))
	})
}

// KernelVersionGTE applies the GTE predicate on the "kernel_version" field.
func KernelVersionGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKernelVersion), v))
	})
}

// KernelVersionLT applies the LT predicate on the "kernel_version" field.
func KernelVersionLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKernelVersion), v))
	})
}

// KernelVersionLTE applies the LTE predicate on the "kernel_version" field.
func KernelVersionLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKernelVersion), v))
	})
}

// KernelVersionContains applies the Contains predicate on the "kernel_version" field.
func KernelVersionContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKernelVersion), v))
	})
}

// KernelVersionHasPrefix applies the HasPrefix predicate on the "kernel_version" field.
func KernelVersionHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKernelVersion), v))
	})
}

// KernelVersionHasSuffix applies the HasSuffix predicate on the "kernel_version" field.
func KernelVersionHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKernelVersion), v))
	})
}

// KernelVersionEqualFold applies the EqualFold predicate on the "kernel_version" field.
func KernelVersionEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKernelVersion), v))
	})
}

// KernelVersionContainsFold applies the ContainsFold predicate on the "kernel_version" field.
func KernelVersionContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKernelVersion), v))
	})
}

// KernelArchEQ applies the EQ predicate on the "kernel_arch" field.
func KernelArchEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKernelArch), v))
	})
}

// KernelArchNEQ applies the NEQ predicate on the "kernel_arch" field.
func KernelArchNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKernelArch), v))
	})
}

// KernelArchIn applies the In predicate on the "kernel_arch" field.
func KernelArchIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKernelArch), v...))
	})
}

// KernelArchNotIn applies the NotIn predicate on the "kernel_arch" field.
func KernelArchNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKernelArch), v...))
	})
}

// KernelArchGT applies the GT predicate on the "kernel_arch" field.
func KernelArchGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKernelArch), v))
	})
}

// KernelArchGTE applies the GTE predicate on the "kernel_arch" field.
func KernelArchGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKernelArch), v))
	})
}

// KernelArchLT applies the LT predicate on the "kernel_arch" field.
func KernelArchLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKernelArch), v))
	})
}

// KernelArchLTE applies the LTE predicate on the "kernel_arch" field.
func KernelArchLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKernelArch), v))
	})
}

// KernelArchContains applies the Contains predicate on the "kernel_arch" field.
func KernelArchContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKernelArch), v))
	})
}

// KernelArchHasPrefix applies the HasPrefix predicate on the "kernel_arch" field.
func KernelArchHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKernelArch), v))
	})
}

// KernelArchHasSuffix applies the HasSuffix predicate on the "kernel_arch" field.
func KernelArchHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKernelArch), v))
	})
}

// KernelArchEqualFold applies the EqualFold predicate on the "kernel_arch" field.
func KernelArchEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKernelArch), v))
	})
}

// KernelArchContainsFold applies the ContainsFold predicate on the "kernel_arch" field.
func KernelArchContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKernelArch), v))
	})
}

// VirtualizationSystemEQ applies the EQ predicate on the "virtualization_system" field.
func VirtualizationSystemEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationSystemNEQ applies the NEQ predicate on the "virtualization_system" field.
func VirtualizationSystemNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationSystemIn applies the In predicate on the "virtualization_system" field.
func VirtualizationSystemIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVirtualizationSystem), v...))
	})
}

// VirtualizationSystemNotIn applies the NotIn predicate on the "virtualization_system" field.
func VirtualizationSystemNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVirtualizationSystem), v...))
	})
}

// VirtualizationSystemGT applies the GT predicate on the "virtualization_system" field.
func VirtualizationSystemGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationSystemGTE applies the GTE predicate on the "virtualization_system" field.
func VirtualizationSystemGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationSystemLT applies the LT predicate on the "virtualization_system" field.
func VirtualizationSystemLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationSystemLTE applies the LTE predicate on the "virtualization_system" field.
func VirtualizationSystemLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationSystemContains applies the Contains predicate on the "virtualization_system" field.
func VirtualizationSystemContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationSystemHasPrefix applies the HasPrefix predicate on the "virtualization_system" field.
func VirtualizationSystemHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationSystemHasSuffix applies the HasSuffix predicate on the "virtualization_system" field.
func VirtualizationSystemHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationSystemEqualFold applies the EqualFold predicate on the "virtualization_system" field.
func VirtualizationSystemEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationSystemContainsFold applies the ContainsFold predicate on the "virtualization_system" field.
func VirtualizationSystemContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVirtualizationSystem), v))
	})
}

// VirtualizationRoleEQ applies the EQ predicate on the "virtualization_role" field.
func VirtualizationRoleEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVirtualizationRole), v))
	})
}

// VirtualizationRoleNEQ applies the NEQ predicate on the "virtualization_role" field.
func VirtualizationRoleNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVirtualizationRole), v))
	})
}

// VirtualizationRoleIn applies the In predicate on the "virtualization_role" field.
func VirtualizationRoleIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVirtualizationRole), v...))
	})
}

// VirtualizationRoleNotIn applies the NotIn predicate on the "virtualization_role" field.
func VirtualizationRoleNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVirtualizationRole), v...))
	})
}

// VirtualizationRoleGT applies the GT predicate on the "virtualization_role" field.
func VirtualizationRoleGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVirtualizationRole), v))
	})
}

// VirtualizationRoleGTE applies the GTE predicate on the "virtualization_role" field.
func VirtualizationRoleGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVirtualizationRole), v))
	})
}

// VirtualizationRoleLT applies the LT predicate on the "virtualization_role" field.
func VirtualizationRoleLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVirtualizationRole), v))
	})
}

// VirtualizationRoleLTE applies the LTE predicate on the "virtualization_role" field.
func VirtualizationRoleLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVirtualizationRole), v))
	})
}

// VirtualizationRoleContains applies the Contains predicate on the "virtualization_role" field.
func VirtualizationRoleContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVirtualizationRole), v))
	})
}

// VirtualizationRoleHasPrefix applies the HasPrefix predicate on the "virtualization_role" field.
func VirtualizationRoleHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVirtualizationRole), v))
	})
}

// VirtualizationRoleHasSuffix applies the HasSuffix predicate on the "virtualization_role" field.
func VirtualizationRoleHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVirtualizationRole), v))
	})
}

// VirtualizationRoleEqualFold applies the EqualFold predicate on the "virtualization_role" field.
func VirtualizationRoleEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVirtualizationRole), v))
	})
}

// VirtualizationRoleContainsFold applies the ContainsFold predicate on the "virtualization_role" field.
func VirtualizationRoleContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVirtualizationRole), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasCPUID applies the HasEdge predicate on the "cpu_id" edge.
func HasCPUID() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CPUIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CPUIDTable, CPUIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCPUIDWith applies the HasEdge predicate on the "cpu_id" edge with a given conditions (other predicates).
func HasCPUIDWith(preds ...predicate.Cpu) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CPUIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CPUIDTable, CPUIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNetworkID applies the HasEdge predicate on the "network_id" edge.
func HasNetworkID() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NetworkIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NetworkIDTable, NetworkIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNetworkIDWith applies the HasEdge predicate on the "network_id" edge with a given conditions (other predicates).
func HasNetworkIDWith(preds ...predicate.Network) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NetworkIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NetworkIDTable, NetworkIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNetstatID applies the HasEdge predicate on the "netstat_id" edge.
func HasNetstatID() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NetstatIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NetstatIDTable, NetstatIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNetstatIDWith applies the HasEdge predicate on the "netstat_id" edge with a given conditions (other predicates).
func HasNetstatIDWith(preds ...predicate.Netstat) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NetstatIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NetstatIDTable, NetstatIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDiskID applies the HasEdge predicate on the "disk_id" edge.
func HasDiskID() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiskIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DiskIDTable, DiskIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiskIDWith applies the HasEdge predicate on the "disk_id" edge with a given conditions (other predicates).
func HasDiskIDWith(preds ...predicate.Disk) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiskIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DiskIDTable, DiskIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		p(s.Not())
	})
}
